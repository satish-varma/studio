
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getAuthenticatedUserData() {
      // Safely attempts to get the authenticated user's document data.
      // Returns null if the document doesn't exist, avoiding rule evaluation errors.
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data; // Access .data directly, it will be null if doc doesn't exist
    }
    
    function getAuthenticatedUserRole() {
      let userData = getAuthenticatedUserData();
      // Check if userData and userData.role exist before trying to access role
      return userData != null && userData.role != null ? userData.role : null;
    }

    function isAdmin() {
      return isSignedIn() && getAuthenticatedUserRole() == 'admin';
    }

    function isManagerRole() {
      return isSignedIn() && getAuthenticatedUserRole() == 'manager';
    }
    
    function isStaffRole() {
      return isSignedIn() && getAuthenticatedUserRole() == 'staff';
    }

    function isManager() { // Broader: 'manager' OR 'admin'
      let role = getAuthenticatedUserRole();
      return isSignedIn() && (role == 'manager' || role == 'admin');
    }

    function isStaff() { // Broader: 'staff' OR 'manager' OR 'admin'
      // This implies anyone authenticated with a role, as 'staff' is the base.
      // If stricter 'staff' only access is needed, use isStaffRole().
      return isSignedIn() && getAuthenticatedUserRole() != null;
    }
    
    function isManagerOfSite(siteId) {
      let userData = getAuthenticatedUserData();
      return isManagerRole() &&
             userData != null && // Ensure userData is not null
             userData.managedSiteIds != null &&
             userData.managedSiteIds is list && // Ensure it's a list
             siteId in userData.managedSiteIds;
    }

    // --- Users Collection (/users/{userId}) ---
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin() || isManagerRole();

      // Admin can create any user document (assumes Auth user already exists)
      // User can create their own initial 'staff' document upon first sign-in/sign-up
      allow create: if (isAdmin() &&
                        request.resource.data.uid == userId && 
                        request.resource.data.email is string &&
                        request.resource.data.role is string && (request.resource.data.role == 'staff' || request.resource.data.role == 'manager' || request.resource.data.role == 'admin') &&
                        // Admin can set initial displayName, role, and assignments
                        request.resource.data.keys().hasAll(['uid', 'email', 'role', 'displayName', 'createdAt']) &&
                        // Optional fields an admin might set
                        (request.resource.data.defaultSiteId == null || request.resource.data.defaultSiteId is string) &&
                        (request.resource.data.defaultStallId == null || request.resource.data.defaultStallId is string) &&
                        (request.resource.data.managedSiteIds == null || request.resource.data.managedSiteIds is list) &&
                        // Ensure all preference fields are initialized (can be null)
                        request.resource.data.defaultItemSearchTerm == null &&
                        request.resource.data.defaultItemCategoryFilter == null &&
                        request.resource.data.defaultItemStockStatusFilter == null &&
                        request.resource.data.defaultItemStallFilterOption == null &&
                        request.resource.data.defaultSalesDateRangeFrom == null &&
                        request.resource.data.defaultSalesDateRangeTo == null &&
                        request.resource.data.defaultSalesStaffFilter == null
                       ) ||
                       (isUser(userId) && // Existing self-creation rule by AuthContext on first sign-in
                        request.resource.data.uid == request.auth.uid &&
                        request.resource.data.email == request.auth.token.email &&
                        request.resource.data.role == 'staff' &&
                        request.resource.data.keys().hasOnly(['uid', 'email', 'role', 'displayName', 'createdAt', 
                                                              'defaultSiteId', 'defaultStallId', 'managedSiteIds',
                                                              'defaultItemSearchTerm', 'defaultItemCategoryFilter', 
                                                              'defaultItemStockStatusFilter', 'defaultItemStallFilterOption',
                                                              'defaultSalesDateRangeFrom', 'defaultSalesDateRangeTo',
                                                              'defaultSalesStaffFilter']) &&
                        request.resource.data.defaultSiteId == null &&
                        request.resource.data.defaultStallId == null &&
                        request.resource.data.managedSiteIds == null &&
                        request.resource.data.defaultItemSearchTerm == null &&
                        request.resource.data.defaultItemCategoryFilter == null &&
                        request.resource.data.defaultItemStockStatusFilter == null &&
                        request.resource.data.defaultItemStallFilterOption == null &&
                        request.resource.data.defaultSalesDateRangeFrom == null &&
                        request.resource.data.defaultSalesDateRangeTo == null &&
                        request.resource.data.defaultSalesStaffFilter == null
                       );
                       
      allow update: if (isUser(userId) &&
                        !request.resource.data.keys().hasAny(['role', 'uid', 'email', 'createdAt', 'managedSiteIds']) &&
                        (getAuthenticatedUserRole() != 'staff' || !request.resource.data.keys().hasAny(['defaultSiteId', 'defaultStallId']))
                       ) || isAdmin();

      allow delete: if isAdmin() && request.auth.uid != userId; // Prevent admin self-delete via rules
    }

    // --- Sites Collection (/sites/{siteId}) ---
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- Stalls Collection (/stalls/{stallId}) ---
    match /stalls/{stallId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- StockItems Collection (/stockItems/{itemId}) ---
    match /stockItems/{itemId} {
      allow read: if isStaff(); 

      allow create: if isStaff() && 
                       request.resource.data.siteId != null &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.quantity is number && request.resource.data.quantity >= 0 &&
                       request.resource.data.price is number && request.resource.data.price >= 0 &&
                       request.resource.data.lastUpdated is string;

      allow update: if isStaff() && 
                       // Allow changing siteId/stallId only if it's admin or it's a master stock item without stallId
                       (isAdmin() || (resource.data.siteId != null && resource.data.stallId == null && request.resource.data.stallId == null)) &&
                       request.resource.data.lastUpdated is string;

      allow delete: if isManager() || 
                      (isStaffRole() && resource.data.siteId == getAuthenticatedUserData().defaultSiteId); 
    }

    // --- SalesTransactions Collection (/salesTransactions/{transactionId}) ---
    match /salesTransactions/{transactionId} {
      allow create: if isStaff() && 
                       request.resource.data.staffId == request.auth.uid &&
                       request.resource.data.siteId != null &&
                       request.resource.data.stallId != null &&
                       request.resource.data.isDeleted == false &&
                       request.resource.data.items is list && request.resource.data.items.size() > 0 &&
                       request.resource.data.totalAmount is number && request.resource.data.totalAmount > 0 &&
                       request.resource.data.transactionDate is timestamp;

      allow read: if (getAuthenticatedUserRole() == 'staff' && resource.data.staffId == request.auth.uid) ||
                     (isManagerRole() && resource.data.siteId in getAuthenticatedUserData().managedSiteIds) ||
                     isAdmin();

      allow update: if isAdmin() &&
                       request.resource.data.isDeleted == true &&
                       request.resource.data.deletedBy == request.auth.uid &&
                       request.resource.data.deletionJustification is string &&
                       !request.resource.data.keys().hasAny(['items', 'totalAmount', 'transactionDate', 'staffId', 'siteId', 'stallId']);

      allow delete: if false;
    }

    // --- StockMovementLogs Collection (/stockMovementLogs/{logId}) ---
    match /stockMovementLogs/{logId} {
      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.stockItemId is string &&
                       request.resource.data.siteId is string &&
                       request.resource.data.type is string &&
                       request.resource.data.quantityChange is number &&
                       request.resource.data.quantityBefore is number &&
                       request.resource.data.quantityAfter is number &&
                       request.resource.data.timestamp is string;

      allow read: if isAdmin() ||
                     (isManagerRole() && resource.data.siteId in getAuthenticatedUserData().managedSiteIds);

      allow update, delete: if false;
    }
    
    // --- userGoogleOAuthTokens Collection (/userGoogleOAuthTokens/{userId}) ---
    match /userGoogleOAuthTokens/{userId} {
      allow read, write, delete: if isUser(userId);
      allow create: if isUser(userId) &&
                      request.resource.data.access_token is string &&
                      request.resource.data.refresh_token is string;
    }
  }
}
