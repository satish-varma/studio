
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getUserRole() {
      return getUserData().role;
    }

    function isAdmin() {
      return isSignedIn() && getUserRole() == 'admin';
    }

    // Checks if user is manager OR admin
    function isManagerOrAdmin() {
      let role = getUserRole();
      return isSignedIn() && (role == 'manager' || role == 'admin');
    }
    
    // Checks if user is specifically a manager
    function isManagerRole() {
      return isSignedIn() && getUserRole() == 'manager';
    }

    // Checks if user is staff, manager, OR admin
    function isStaffOrHigher() {
      let role = getUserRole();
      return isSignedIn() && (role == 'staff' || role == 'manager' || role == 'admin');
    }
    
    function isStaffRole() {
       return isSignedIn() && getUserRole() == 'staff';
    }
    
    function isManagerOfSite(siteId) {
      let userData = getUserData();
      return isManagerRole() && userData.managedSiteIds != null && siteId in userData.managedSiteIds;
    }
    
    function isStaffOfSiteAndStall(siteId, stallId) {
      let userData = getUserData();
      return isStaffRole() && userData.defaultSiteId == siteId && userData.defaultStallId == stallId;
    }

    // --- Users Collection (/users/{userId}) ---
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin() || isManagerOrAdmin(); 

      allow create: if isUser(userId) &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.role == 'staff' &&
                       !request.resource.data.keys().hasAny(['defaultSiteId', 'defaultStallId', 'managedSiteIds']);


      allow update: if 
        (isUser(userId) && 
          !request.resource.data.keys().hasAny(['role', 'uid', 'email', 'createdAt', 'managedSiteIds']) &&
          // Staff cannot change their own defaultSiteId/defaultStallId
          (getUserRole() != 'staff' || !request.resource.data.keys().hasAny(['defaultSiteId', 'defaultStallId']))
        ) || 
        isAdmin(); // Admin can update anything

      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // --- Sites Collection (/sites/{siteId}) ---
    match /sites/{siteId} {
      allow read: if isSignedIn(); 
      allow create, update, delete: if isAdmin();
    }

    // --- Stalls Collection (/stalls/{stallId}) ---
    match /stalls/{stallId} {
      allow read: if isSignedIn(); 
      allow create, update, delete: if isAdmin();
    }

    // --- StockItems Collection (/stockItems/{itemId}) ---
    match /stockItems/{itemId} {
      allow read: if isStaffOrHigher(); 

      allow create: if 
                       request.resource.data.siteId != null &&
                       (
                         isAdmin() || 
                         (isManagerRole() && isManagerOfSite(request.resource.data.siteId)) || 
                         (isStaffRole() && isStaffOfSiteAndStall(request.resource.data.siteId, request.resource.data.stallId))
                       ) &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.quantity is number && request.resource.data.quantity >= 0 &&
                       request.resource.data.price is number && request.resource.data.price >= 0 &&
                       request.resource.data.lastUpdated is string;

      allow update: if 
                       resource.data.siteId != null && 
                       (
                         isAdmin() || 
                         (isManagerRole() && isManagerOfSite(resource.data.siteId)) || 
                         (isStaffRole() && isStaffOfSiteAndStall(resource.data.siteId, resource.data.stallId))
                       ) &&
                       request.resource.data.lastUpdated is string;


      allow delete: if isAdmin() ||
                       (isManagerRole() && isManagerOfSite(resource.data.siteId));
    }

    // --- SalesTransactions Collection (/salesTransactions/{transactionId}) ---
    match /salesTransactions/{transactionId} {
      allow create: if 
                       request.resource.data.staffId == request.auth.uid &&
                       request.resource.data.siteId != null &&
                       request.resource.data.stallId != null && 
                       (
                         isAdmin() || 
                         (isManagerRole() && isManagerOfSite(request.resource.data.siteId)) || // Manager can record for any stall in their managed site
                         (isStaffRole() && isStaffOfSiteAndStall(request.resource.data.siteId, request.resource.data.stallId))
                       ) &&
                       request.resource.data.isDeleted == false &&
                       request.resource.data.items is list && request.resource.data.items.size() > 0 &&
                       request.resource.data.totalAmount is number && request.resource.data.totalAmount > 0 &&
                       request.resource.data.transactionDate is timestamp;

      allow read: if 
                     (isStaffRole() && resource.data.staffId == request.auth.uid) ||
                     (isManagerRole() && isManagerOfSite(resource.data.siteId)) ||
                     isAdmin();

      allow update: if isAdmin() &&
                       request.resource.data.isDeleted == true &&
                       request.resource.data.deletedBy == request.auth.uid &&
                       request.resource.data.deletionJustification is string &&
                       !request.resource.data.keys().hasAny(['items', 'totalAmount', 'transactionDate', 'staffId', 'siteId', 'stallId']);


      allow delete: if false;
    }

    // --- StockMovementLogs Collection (/stockMovementLogs/{logId}) ---
    match /stockMovementLogs/{logId} {
      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.stockItemId is string &&
                       request.resource.data.siteId is string &&
                       request.resource.data.type is string &&
                       request.resource.data.quantityChange is number &&
                       request.resource.data.quantityBefore is number &&
                       request.resource.data.quantityAfter is number &&
                       request.resource.data.timestamp is string;

      allow read: if isAdmin() ||
                     (isManagerRole() && isManagerOfSite(resource.data.siteId));

      allow update, delete: if false;
    }

    // --- userGoogleOAuthTokens Collection (/userGoogleOAuthTokens/{userId}) ---
    match /userGoogleOAuthTokens/{userId} {
      allow read, write, delete: if isUser(userId);
      allow create: if isUser(userId) &&
                      request.resource.data.access_token is string &&
                      request.resource.data.refresh_token is string;
    }
  }
}
