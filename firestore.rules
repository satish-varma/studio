
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isAdmin() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'admin';
    }

    function isManager() {
        return isAuthenticated() && getUserRole(request.auth.uid) == 'manager';
    }
    
    function isStaff() {
        return isAuthenticated() && getUserRole(request.auth.uid) == 'staff';
    }

    // Is the user a manager of the site the resource is in?
    function isManagerOfSite(siteId) {
      let managedSites = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managedSiteIds;
      return isManager() && siteId in managedSites;
    }

    // Is the user a staff member of the site the resource is in?
    function isStaffOfSite(siteId) {
      return isStaff() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.defaultSiteId == siteId;
    }
    
    // Can the user access data within a given site? (Either staff/manager of that site, or an admin)
    function canAccessSiteData(siteId) {
        return isAdmin() || isManagerOfSite(siteId) || isStaffOfSite(siteId);
    }
    
    // --- Collection Rules ---

    // USERS
    // Users can read their own data.
    // Admins can read/write any user data.
    // Managers can read any user data (for filtering).
    // Users can update their own non-critical fields.
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin() || isManager();
      allow create: if isAdmin();
      allow update: if (isUser(userId) && !("role" in request.resource.data)) || isAdmin();
      allow delete: if isAdmin();
    }

    // SITES
    // Any authenticated user can read sites (needed for context selectors).
    // Only admins can create/update/delete sites.
    match /sites/{siteId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // STALLS
    // Any authenticated user can read stalls.
    // Only admins can create/update/delete stalls.
    match /stalls/{stallId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // STOCK ITEMS
    match /stockItems/{itemId} {
      allow read: if isAuthenticated() && canAccessSiteData(resource.data.siteId);
      
      // CREATE: Admins/Managers can create items in sites they manage. Staff can't create.
      allow create: if (isAdmin() || isManagerOfSite(request.resource.data.siteId));
      
      // UPDATE: 
      // Admins can update anything.
      // Managers can update anything in their managed sites.
      // Staff can ONLY update 'quantity' and 'lastUpdated' in their assigned stall.
      allow update: if isAdmin() || 
                     isManagerOfSite(request.resource.data.siteId) ||
                     (isStaff() && 
                      request.resource.data.siteId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.defaultSiteId &&
                      request.resource.data.stallId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.defaultStallId &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['quantity', 'lastUpdated']));
                      
      // DELETE: Admins/Managers can delete. Additional logic for master items with stock is in rules now.
      allow delete: if isAdmin() || isManagerOfSite(resource.data.siteId);
    }
    
    // SALES TRANSACTIONS
    // Users can read their own sales.
    // Managers/Admins can read sales in their context.
    // Authenticated users can create sales (for themselves).
    // Only Admins can "soft delete" (update specific fields).
    match /salesTransactions/{saleId} {
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.staffId || canAccessSiteData(resource.data.siteId));
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.staffId;
      allow update: if isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isDeleted', 'deletedAt', 'deletedBy', 'deletionJustification']);
      allow delete: if false; // Disallow hard deletes
    }

    // STOCK MOVEMENT LOGS
    // Write-only for any authenticated user. Should not be readable or updatable by clients to ensure data integrity.
    match /stockMovementLogs/{logId} {
        allow read, update, delete: if false;
        allow create: if isAuthenticated();
    }
    
    // FOOD STALL ACTIVITY LOGS
    // Write-only for any authenticated user.
    match /foodStallActivityLogs/{logId} {
        allow read, update, delete: if false;
        allow create: if isAuthenticated();
    }
    
    // FOOD VENDORS
    // Authenticated users can read (for dropdowns).
    // Authenticated users can create (any user can add a vendor).
    // Only admins can delete.
    match /foodVendors/{vendorId} {
        allow read, create: if isAuthenticated();
        allow delete: if isAdmin();
    }
    
    // FOOD ITEM EXPENSES
    // Users can read/create for their site context.
    // Only creator or admin/manager can update/delete.
    match /foodItemExpenses/{expenseId} {
      allow read: if canAccessSiteData(resource.data.siteId);
      allow create: if canAccessSiteData(request.resource.data.siteId) && request.auth.uid == request.resource.data.recordedByUid;
      allow update, delete: if canAccessSiteData(resource.data.siteId) && (isAdmin() || isManager() || isUser(resource.data.recordedByUid));
    }
    
    // FOOD SALE TRANSACTIONS
    // Similar to regular sales.
    match /foodSaleTransactions/{saleId} {
        allow read: if canAccessSiteData(resource.data.siteId);
        allow write: if canAccessSiteData(request.resource.data.siteId) && request.auth.uid == request.resource.data.recordedByUid;
    }

    // STAFF MANAGEMENT (Attendance, Advances)
    match /staffAttendance/{attendanceId} {
        // Only managers/admins of the site can read/write attendance
        allow read, write: if isManagerOfSite(resource.data.siteId) || isAdmin();
    }

    match /advances/{advanceId} {
        // Only managers/admins of the relevant site can read/write advances.
        // This relies on having a siteId on the advance record, which is currently missing.
        // For now, let's allow any manager/admin to read/write.
        // TODO: Add siteId to salary advance documents and enforce rule here.
        allow read, write: if isManager() || isAdmin();
    }

  }
}

    