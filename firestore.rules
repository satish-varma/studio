
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =====================================================================
    // Helper Functions
    // =====================================================================
    
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function getUserRole() {
        return getUserData().role;
    }

    function isAdmin() {
      return isSignedIn() && getUserRole() == 'admin';
    }
    
    function isManager() {
        return isSignedIn() && getUserRole() == 'manager';
    }

    function isStaff() {
        return isSignedIn() && getUserRole() == 'staff';
    }
    
    function getManagerSiteIds() {
        let managedIds = getUserData().managedSiteIds;
        return managedIds is list ? managedIds : [];
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isResourceInManagedSite(siteId) {
        return isManager() && siteId in getManagerSiteIds();
    }
    
    function isResourceInAssignedSite(siteId) {
        return isStaff() && siteId == getUserData().defaultSiteId;
    }

    function isResourceInAssignedStall(stallId) {
        return isStaff() && stallId == getUserData().defaultStallId;
    }

    // --- User Profile Rules ---
    function canUpdateOwnProfile(updatedData) {
        // Users can update their display name and preferences.
        // They CANNOT update their own role, email, uid, or assignments.
        let nonEditableFields = ['uid', 'email', 'role', 'managedSiteIds', 'defaultSiteId', 'defaultStallId'];
        return request.auth.uid == resource.data.uid && 
               !updatedData.keys().hasAny(nonEditableFields);
    }
    
    // --- Stock Item Rules ---
    function isValidStockItemWrite(itemData) {
        return itemData.name is string && itemData.name.size() > 1 &&
               itemData.category is string && itemData.category.size() > 1 &&
               itemData.quantity is number && itemData.quantity >= 0 &&
               itemData.price is number && itemData.price >= 0 &&
               itemData.siteId is string;
    }

    function canUpdateStockQuantityForSale(updatedData) {
        // Allows updating only quantity and lastUpdated fields during a sale or stock adjustment.
        let allowedFields = ['quantity', 'lastUpdated'];
        return updatedData.keys().hasOnly(allowedFields) &&
               updatedData.quantity is number && updatedData.quantity >= 0;
    }

    // --- Sales Transaction Rules ---
    function isValidSaleContext(saleData) {
      let user = getUserData();
      if (user.role == 'staff') {
        // Staff can only record sales for their assigned site and stall.
        return saleData.siteId == user.defaultSiteId && saleData.stallId == user.defaultStallId;
      }
      if (user.role == 'manager') {
        // Manager must be assigned to the site of the sale.
        // And the stall of the sale must exist within that site.
        return saleData.siteId in getManagerSiteIds() &&
               exists(/databases/$(database)/documents/stalls/$(saleData.stallId)) &&
               get(/databases/$(database)/documents/stalls/$(saleData.stallId)).data.siteId == saleData.siteId;
      }
      return false; // Should be admin if not staff/manager, admins use different perms
    }

    function isValidSaleWriteCommon(saleData) {
      // User must be creating the sale for themselves.
      return saleData.staffId == request.auth.uid &&
             saleData.totalAmount is number && saleData.totalAmount >= 0 &&
             saleData.items is list && saleData.items.size() > 0 &&
             saleData.isDeleted == false &&
             saleData.transactionDate is timestamp;
    }
    
    // =====================================================================
    // Collection Rules
    // =====================================================================

    // User documents:
    // - Read: Authenticated users can read their own document. Admins can read any.
    // - Write: Users can update their own document (but not their role/assignments). Admins can update any.
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow write: if isSignedIn() && (isOwner(userId) && canUpdateOwnProfile(request.resource.data)) || isAdmin();
      // Note: User creation is handled by a callable function/API route which uses admin privileges,
      // so direct client creation rules can be strict.
      allow create: if isAdmin();
    }
    
    // Sites:
    // - Read: Any authenticated user can read site info (to see names, etc.)
    // - Write: Only Admins can create, update, or delete sites.
    match /sites/{siteId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // Stalls:
    // - Read: Any authenticated user can read stall info.
    // - Write: Only Admins can create, update, or delete stalls.
    match /stalls/{stallId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // StockItems:
    // This is the most complex set of rules.
    match /stockItems/{itemId} {
      allow read: if isSignedIn() && (
        isAdmin() || 
        isResourceInManagedSite(resource.data.siteId) ||
        isResourceInAssignedSite(resource.data.siteId)
      );

      // Create: Admin or a Manager for the specified site can create items.
      allow create: if isSignedIn() && (
        isAdmin() ||
        (isManager() && isResourceInManagedSite(request.resource.data.siteId))
      );
      
      // Update: More granular permissions needed.
      allow update: if isSignedIn() && (
        isAdmin() ||
        (isManager() && isResourceInManagedSite(resource.data.siteId) && isValidStockItemWrite(request.resource.data)) ||
        (isStaff() && 
         isResourceInAssignedSite(resource.data.siteId) &&
         isResourceInAssignedStall(resource.data.stallId) &&
         canUpdateStockQuantityForSale(request.resource.data)
        )
      );
      
      // Delete: Admin, or a Manager for that site.
      allow delete: if isSignedIn() && (
          isAdmin() ||
          (isManager() && isResourceInManagedSite(resource.data.siteId))
      );
    }
    
    // Sales Transactions:
    match /salesTransactions/{saleId} {
        allow read: if isSignedIn() && (
            isAdmin() ||
            isResourceInManagedSite(resource.data.siteId) ||
            (isStaff() && isOwner(resource.data.staffId))
        );
        
        allow create: if isSignedIn() && isValidSaleWriteCommon(request.resource.data) && (
            isAdmin() || 
            isValidSaleContext(request.resource.data)
        );
        
        allow update: if isSignedIn() && isAdmin() &&
            // Admins can only update deletion status and justification, not the core sale data.
            request.resource.data.isDeleted == true &&
            request.resource.data.keys().hasOnly(['isDeleted', 'deletedAt', 'deletedBy', 'deletionJustification']);
            
        allow delete: if false; // Sales should be soft-deleted via update, not hard-deleted.
    }
    
    // Stock Movement Logs:
    // Only allow creation by authenticated users. Reading could be restricted to admins.
    match /stockMovementLogs/{logId} {
        allow read: if isAdmin();
        allow create: if isSignedIn(); // Log creation should be server-side or via trusted client logic
        allow update, delete: if false; // Logs should be immutable
    }

    // Google OAuth Tokens:
    // Only the owner of the tokens can read or write their own token document.
    match /userGoogleOAuthTokens/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Food Stall Expenses:
    // An authenticated user (staff, manager, admin) can create expenses.
    // Reading should be restricted to users in the context.
    match /foodItemExpenses/{expenseId} {
      allow read: if isSignedIn() && (
        isAdmin() ||
        isResourceInManagedSite(resource.data.siteId) ||
        (isStaff() && isResourceInAssignedSite(resource.data.siteId))
      );
      allow create: if isSignedIn() && request.resource.data.recordedByUid == request.auth.uid;
      allow update, delete: if isAdmin() || (isManager() && isResourceInManagedSite(resource.data.siteId));
    }

    // Food Sale Transactions:
    // Similar rules to the main sales transactions.
    match /foodSaleTransactions/{foodSaleId} {
      allow read: if isSignedIn() && (
        isAdmin() ||
        isResourceInManagedSite(resource.data.siteId) ||
        (isStaff() && isOwner(resource.data.recordedByUid))
      );
      allow create: if isSignedIn() && request.resource.data.recordedByUid == request.auth.uid;
      allow update, delete: if isAdmin(); // Only admins can modify/delete food sales for now
    }
  }
}

    