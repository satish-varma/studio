
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // --- User and Role Helpers ---
    function getAuthenticatedUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getAuthenticatedUserRole() {
      // Check if user document exists before trying to access .role
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        ? getAuthenticatedUserData().role
        : null;
    }

    function isAdmin() {
      return getAuthenticatedUserRole() == 'admin';
    }
    
    function isManager() {
      return getAuthenticatedUserRole() == 'manager';
    }

    function isStaff() {
      return getAuthenticatedUserRole() == 'staff';
    }
    
    // --- Context and Ownership Helpers ---
    function getManagerSiteIds() {
        let userData = getAuthenticatedUserData();
        return (isManager() && 'managedSiteIds' in userData)
            ? userData.managedSiteIds
            : [];
    }
    
    // Checks if the user is a manager of a specific site
    function isManagerOfSite(siteId) {
        return isManager() && siteId in getManagerSiteIds();
    }
    
    // Checks if a given stall ID belongs to a given site ID
    function isStallInSite(stallId, siteId) {
        return get(/databases/$(database)/documents/stalls/$(stallId)).data.siteId == siteId;
    }

    // --- Write Validation Helpers ---
    
    // Validates a write operation for a stock item, ensuring data integrity.
    function isValidStockItemWrite(itemData) {
        return itemData.name is string && itemData.name.size() > 0
            && itemData.quantity is number && itemData.quantity >= 0
            && itemData.price is number && itemData.price >= 0
            && itemData.lastUpdated is string;
    }
    
    // Checks if an update to a stock item only modifies quantity and lastUpdated fields.
    function isOnlyQuantityUpdate(itemData) {
        return itemData.diff(resource.data).affectedKeys().hasOnly(['quantity', 'lastUpdated']);
    }

    // --- COLLECTIONS RULES ---

    // USERS: Only admins can create/delete. Users can read/update their own profile (but not their role).
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin();
      allow create: if isAdmin();
      allow update: if (isUser(userId) && !('role' in request.resource.data)) || isAdmin();
      allow delete: if isAdmin() && request.auth.uid != userId;
      allow list: if isAdmin() || isManager();
    }

    // SITES & STALLS: Only admins can modify. Any authenticated user can read them to populate dropdowns etc.
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
     match /stalls/{stallId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // STOCK ITEMS:
    match /stockItems/{itemId} {
      allow read: if isSignedIn();
      
      // Admin: Can create anything.
      // Manager: Can create items in their managed sites.
      allow create: if isAdmin() || (isManager() && request.resource.data.siteId in getManagerSiteIds() && isValidStockItemWrite(request.resource.data));

      // Admin: Can update anything.
      // Manager: Can update any item in their managed sites.
      // Staff: Can ONLY update quantity of items within their assigned site (both master and stall stock).
      // This is crucial for sales transactions where both might be updated at once.
      allow update: if isAdmin() || 
                      (isManager() && resource.data.siteId in getManagerSiteIds() && isValidStockItemWrite(request.resource.data)) ||
                      (isStaff() && resource.data.siteId == getAuthenticatedUserData().defaultSiteId && isOnlyQuantityUpdate(request.resource.data));
                      
      // Admin: Can delete anything.
      // Manager: Can delete items in their managed sites.
      allow delete: if isAdmin() || (isManager() && resource.data.siteId in getManagerSiteIds());
    }

    // SALES TRANSACTIONS:
    match /salesTransactions/{saleId} {
      allow read: if isSignedIn(); // Allow any signed-in user to read, client-side logic will filter what they see.
      
      // Admin: Can create sales anywhere.
      // Manager: Can create sales for a stall within one of their managed sites.
      // Staff: Can create sales for their assigned stall.
      // All: Must set their own UID as staffId.
      allow create: if isSignedIn() && request.resource.data.staffId == request.auth.uid && (
                      isAdmin() ||
                      (isManager() && request.resource.data.siteId in getManagerSiteIds() && isStallInSite(request.resource.data.stallId, request.resource.data.siteId)) ||
                      (isStaff() && request.resource.data.siteId == getAuthenticatedUserData().defaultSiteId && request.resource.data.stallId == getAuthenticatedUserData().defaultStallId)
                    );
                    
      // Admin: Can mark a sale as deleted (soft delete).
      allow update: if isAdmin() && 
                      request.resource.data.isDeleted == true &&
                      resource.data.isDeleted == false;
                      
      allow delete: if false; // Prevent physical deletion.
    }

    // STOCK MOVEMENT LOGS:
    match /stockMovementLogs/{logId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, list: if isAdmin() || isManager();
      allow update, delete: if false;
    }
    
    // OAUTH TOKENS for Google Sheets:
    match /userGoogleOAuthTokens/{userId} {
      allow read, write, create, delete: if isUser(userId);
    }
    
    // FOOD STALL EXPENSES & SALES:
    // Any authenticated user within the correct site/stall context can record expenses/sales for that context.
    match /foodItemExpenses/{expenseId} {
       allow read: if isSignedIn();
       allow create: if isSignedIn() && request.resource.data.recordedByUid == request.auth.uid;
       allow update, delete: if isAdmin() || (isManager() && request.resource.data.siteId in getManagerSiteIds());
    }
    
    match /foodSaleTransactions/{foodSaleId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.recordedByUid == request.auth.uid;
        allow update, delete: if isAdmin() || (isManager() && request.resource.data.siteId in getManagerSiteIds());
    }
  }
}
