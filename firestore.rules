
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      let userDocPath = /databases/$(database)/documents/users/$(userId);
      return exists(userDocPath) ? get(userDocPath).data : null;
    }

    function getAuthenticatedUserData() {
      return isSignedIn() ? getUserData(request.auth.uid) : null;
    }

    function getAuthenticatedUserRole() {
      let userData = getAuthenticatedUserData();
      return userData != null ? userData.role : null;
    }

    function isAdmin() {
      return getAuthenticatedUserRole() == 'admin';
    }

    function isManagerRole() {
      return getAuthenticatedUserRole() == 'manager';
    }

    function isStaffRole() {
      return getAuthenticatedUserRole() == 'staff';
    }

    function isManagerOfSite(siteId) {
      let userData = getAuthenticatedUserData();
      return isManagerRole() &&
             userData != null &&
             userData.managedSiteIds != null &&
             siteId in userData.managedSiteIds;
    }

    function isStaffAssignedTo(siteId, stallId) {
      let userData = getAuthenticatedUserData();
      return isStaffRole() &&
             userData != null &&
             userData.defaultSiteId == siteId &&
             userData.defaultStallId == stallId;
    }
    
    function isStaffAssignedToSiteOnly(siteId) {
      let userData = getAuthenticatedUserData();
      return isStaffRole() &&
             userData != null &&
             userData.defaultSiteId == siteId;
    }

    // --- Collections Rules ---

    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin() || isManagerRole();
      allow create: if isAdmin(); 
      allow update: if (isUser(userId) &&
                        !request.resource.data.keys().hasAny(['role', 'uid', 'email', 'createdAt']) &&
                        (getAuthenticatedUserRole() == 'admin' || 
                          (getAuthenticatedUserRole() == 'manager' && !request.resource.data.keys().hasAny(['managedSiteIds', 'defaultSiteId', 'defaultStallId'])) ||
                          (getAuthenticatedUserRole() == 'staff' && !request.resource.data.keys().hasAny(['managedSiteIds', 'defaultSiteId', 'defaultStallId']))
                        )
                       ) || isAdmin();
      allow delete: if isAdmin() && request.auth.uid != userId;
    }
    match /users {
      allow list: if isAdmin() || isManagerRole();
    }

    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    match /sites {
      allow list: if isSignedIn();
    }

    match /stalls/{stallId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    match /stalls {
      allow list: if isSignedIn();
    }

    match /stockItems/{itemId} {
      allow read: if isSignedIn();

      allow create: if request.resource.data.siteId != null &&
                       (isAdmin() ||
                        (isManagerRole() && isManagerOfSite(request.resource.data.siteId)) ||
                        (isStaffRole() && 
                          ( (request.resource.data.stallId != null && isStaffAssignedTo(request.resource.data.siteId, request.resource.data.stallId)) || 
                            (request.resource.data.stallId == null && isStaffAssignedToSiteOnly(request.resource.data.siteId)) 
                          )
                        )
                       ) &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.quantity is number && request.resource.data.quantity >= 0 &&
                       request.resource.data.price is number && request.resource.data.price >= 0 &&
                       request.resource.data.lastUpdated is string; 

      allow update: if resource.data.siteId != null &&
                       (isAdmin() ||
                        (isManagerRole() && isManagerOfSite(resource.data.siteId)) || // Managers can update items in their sites (all fields if needed, client controls specifics)
                        (isStaffRole() &&
                          (
                            // Case 1: Staff updating their assigned STALL item - only quantity & lastUpdated
                            (resource.data.stallId != null &&
                             isStaffAssignedTo(resource.data.siteId, resource.data.stallId) &&
                             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['quantity', 'lastUpdated'])
                            )
                            ||
                            // Case 2: Staff updating MASTER stock item (stallId is null) FOR THEIR ASSIGNED SITE,
                            // only if quantity and lastUpdated are being changed (e.g., due to a sale from their stall)
                            (resource.data.stallId == null &&
                             isStaffAssignedToSiteOnly(resource.data.siteId) &&
                             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['quantity', 'lastUpdated'])
                            )
                          )
                        )
                       ) &&
                       request.resource.data.lastUpdated is string &&
                       request.resource.data.quantity is number && request.resource.data.quantity >= 0 &&
                       (request.resource.data.siteId == resource.data.siteId || isAdmin()) && 
                       (request.resource.data.stallId == resource.data.stallId || isAdmin()); 

      allow delete: if resource.data.siteId != null &&
                       (isAdmin() ||
                        (isManagerRole() && isManagerOfSite(resource.data.siteId)) ||
                        (isStaffRole() && 
                          ( (resource.data.stallId != null && isStaffAssignedTo(resource.data.siteId, resource.data.stallId)) ||
                            (resource.data.stallId == null && isStaffAssignedToSiteOnly(resource.data.siteId))
                          )
                        )
                       );
    }
    match /stockItems {
        allow list: if isSignedIn();
    }

    match /salesTransactions/{transactionId} {
      // Full secure rule for salesTransactions create
      allow create: if isSignedIn() && 
                       request.resource.data.staffId == request.auth.uid && 
                       request.resource.data.siteId != null &&
                       request.resource.data.stallId != null &&
                       (isAdmin() || 
                        (isManagerRole() && isManagerOfSite(request.resource.data.siteId) && request.resource.data.stallId != null) ||
                        (isStaffRole() && isStaffAssignedTo(request.resource.data.siteId, request.resource.data.stallId)) 
                       ) &&
                       request.resource.data.isDeleted == false &&
                       request.resource.data.items is list && request.resource.data.items.size() > 0 &&
                       request.resource.data.totalAmount is number && request.resource.data.totalAmount >= 0 &&
                       request.resource.data.transactionDate is map && request.resource.data.transactionDate.keys().hasAll(['seconds', 'nanoseconds']);

      allow read: if (isStaffRole() && resource.data.staffId == request.auth.uid) || 
                     (isManagerRole() && isManagerOfSite(resource.data.siteId)) ||
                     isAdmin();

      allow update: if isAdmin() &&
                       request.resource.data.isDeleted == true &&
                       resource.data.isDeleted == false && 
                       request.resource.data.deletedBy == request.auth.uid &&
                       request.resource.data.deletionJustification is string && request.resource.data.deletionJustification.size() > 0 &&
                       request.resource.data.deletedAt is string && 
                       !request.resource.data.keys().hasAny(['items', 'totalAmount', 'transactionDate', 'staffId', 'siteId', 'stallId', 'staffName']);

      allow delete: if false;
    }
    match /salesTransactions {
        allow list: if isSignedIn();
    }

    match /stockMovementLogs/{logId} {
      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.stockItemId is string &&
                       request.resource.data.siteId is string &&
                       request.resource.data.type is string &&
                       request.resource.data.quantityChange is number &&
                       request.resource.data.quantityBefore is number &&
                       request.resource.data.quantityAfter is number &&
                       request.resource.data.timestamp is string;

      allow read: if isAdmin() || 
                     (isManagerRole() && isManagerOfSite(resource.data.siteId));

      allow update, delete: if false;
    }
    match /stockMovementLogs {
        allow list: if isAdmin() || isManagerRole();
    }

    match /userGoogleOAuthTokens/{userId} {
      allow read, write, delete: if isUser(userId);
      allow create: if isUser(userId) &&
                      request.resource.data.access_token is string &&
                      request.resource.data.refresh_token is string;
    }
  }
}

    