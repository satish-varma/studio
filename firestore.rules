
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function isUserRole(role) {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to check if a manager is assigned to a specific site
    function isManagerOfSite(siteId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return request.auth != null &&
             user.role == 'manager' &&
             siteId in user.managedSiteIds;
    }

    // Helper function to check if staff is assigned to a specific site/stall
    function isStaffOfSite(siteId) {
        let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return request.auth != null && user.role == 'staff' && user.defaultSiteId == siteId;
    }
    function isStaffOfStall(stallId) {
        let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return request.auth != null && user.role == 'staff' && user.defaultStallId == stallId;
    }

    // Users Collection
    match /users/{userId} {
      // Any authenticated user can create their own user document (initially after signup, though signup flow is admin-only now)
      // Admin can create any user document (though usually done via backend)
      allow create: if request.auth != null && (isOwner(userId) || isUserRole('admin'));

      // Users can read their own profile
      // Admins can read any user profile
      // Managers can read profiles of staff they manage (more complex, simplify for now: allow managers to read all users for dropdowns)
      allow read: if request.auth != null && (isOwner(userId) || isUserRole('admin') || isUserRole('manager'));

      // Users can update their own profile (specific fields usually controlled by app logic)
      // Admins can update any user profile (e.g., role, assignments)
      allow update: if request.auth != null && (isOwner(userId) || isUserRole('admin'));

      // Only admins can delete user documents (soft delete preferred by app usually)
      allow delete: if isUserRole('admin');
    }

    // Sites Collection
    match /sites/{siteId} {
      // Authenticated users can read site information (for selectors, etc.)
      allow read: if request.auth != null;
      // Only admins can create, update, or delete sites
      allow write: if isUserRole('admin');
    }

    // Stalls Collection
    match /stalls/{stallId} {
      // Authenticated users can read stall information
      allow read: if request.auth != null;
      // Only admins can create, update, or delete stalls
      allow write: if isUserRole('admin');
    }

    // StockItems Collection
    match /stockItems/{itemId} {
      // Authenticated users can read stock items (staff/managers see items for their context)
      allow read: if request.auth != null;

      // Create:
      // - Admins can create any stock item (master or stall)
      // - Managers can create master stock for their managed sites, or stall stock for stalls within their managed sites
      // - Staff can create items for their assigned site's master stock or their assigned stall
      allow create: if request.auth != null &&
                      (
                        isUserRole('admin') ||
                        (isUserRole('manager') && resource.data.siteId != null && isManagerOfSite(resource.data.siteId)) ||
                        (isUserRole('staff') && resource.data.siteId != null && isStaffOfSite(resource.data.siteId) && (resource.data.stallId == null || isStaffOfStall(resource.data.stallId)))
                      );

      // Update:
      // - Admins can update any stock item
      // - Managers can update items within their managed sites (master or stall)
      // - Staff can update items in their assigned context (master for their site, or their specific stall)
      // - Rules need to be careful about quantity updates and linked master stock (often best handled by backend/transactions)
      allow update: if request.auth != null &&
                      (
                        isUserRole('admin') ||
                        (isUserRole('manager') && resource.data.siteId != null && isManagerOfSite(resource.data.siteId)) ||
                        (isUserRole('staff') && resource.data.siteId != null && isStaffOfSite(resource.data.siteId) && (resource.data.stallId == null || isStaffOfStall(resource.data.stallId)))
                      );
                      // Add field-level restrictions if needed, e.g. only certain roles can change price.
                      // Example: allow update: if request.resource.data.quantity != resource.data.quantity; // only allow quantity change
      // Delete:
      // - Admins can delete any stock item
      // - Managers can delete items within their managed sites (careful with master stock linked to stalls)
      // - Staff can delete items from their assigned stall (if policy allows, returns to master if linked)
      // Deletion of master stock with active allocations should be prevented by app logic or more complex rules.
      allow delete: if request.auth != null &&
                      (
                        isUserRole('admin') ||
                        (isUserRole('manager') && resource.data.siteId != null && isManagerOfSite(resource.data.siteId)) ||
                        (isUserRole('staff') && resource.data.stallId != null && isStaffOfStall(resource.data.stallId)) // Staff might only delete from their stall
                      );
    }

    // SalesTransactions Collection
    match /salesTransactions/{saleId} {
      // Read:
      // - Admins can read all sales
      // - Managers can read sales for their managed sites
      // - Staff can read sales they created or for their assigned stall/site
      allow read: if request.auth != null &&
                    (
                      isUserRole('admin') ||
                      (isUserRole('manager') && resource.data.siteId != null && isManagerOfSite(resource.data.siteId)) ||
                      (isUserRole('staff') && (resource.data.staffId == request.auth.uid || (resource.data.stallId != null && isStaffOfStall(resource.data.stallId)) || (resource.data.siteId != null && isStaffOfSite(resource.data.siteId)) ) )
                    );

      // Create:
      // - Authenticated staff/managers/admins can create sales for their active context
      // - Ensure the sale being created has siteId and stallId matching user's context (validated by app logic, can be reinforced here)
      allow create: if request.auth != null &&
                      request.resource.data.staffId == request.auth.uid &&
                      (
                        isUserRole('admin') || // Admin can record anywhere if app logic sets context
                        (isUserRole('manager') && request.resource.data.siteId != null && isManagerOfSite(request.resource.data.siteId)) ||
                        (isUserRole('staff') && request.resource.data.stallId != null && isStaffOfStall(request.resource.data.stallId))
                      );

      // Update (e.g., for soft delete):
      // - Only admins can "delete" (soft delete by setting isDeleted=true)
      allow update: if request.auth != null &&
                      isUserRole('admin') &&
                      request.resource.data.isDeleted == true && // Only allow update to mark as deleted
                      request.resource.data.keys().hasAll(['isDeleted', 'deletedAt', 'deletedBy', 'deletionJustification']); // Ensure required fields for soft delete are present

      // Hard delete should generally be disallowed from client
      allow delete: if false;
    }

    // StockMovementLogs Collection
    match /stockMovementLogs/{logId} {
      // Admins can read all logs
      // Managers might read logs for their sites (more complex query)
      allow read: if isUserRole('admin') ||
                    (isUserRole('manager') && resource.data.siteId != null && isManagerOfSite(resource.data.siteId));
      // Log creation is typically server-side or by trusted client actions (e.g., within transactions)
      // Direct client creation might be too permissive.
      allow create: if request.auth != null; // Allow any authenticated to create, relying on app logic for correctness. Could be tightened.
      allow update, delete: if false; // Logs should be immutable
    }

    // UserGoogleOAuthTokens Collection
    // Only the user themselves should be able to write their own tokens.
    // Reading should ideally be restricted to backend (Admin SDK).
    match /userGoogleOAuthTokens/{userId} {
      allow read, write: if isOwner(userId); // User can read/write their own tokens for Sheets integration
      // For stricter security, client-side read might be disallowed if tokens are only ever used by the backend proxy.
    }
  }
}

    