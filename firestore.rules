rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // More robust role fetching
    function getRoleForUser(userId) {
      let userDocPath = /databases/$(database)/documents/users/$(userId);
      // Check if the document exists and then access the role.
      // If the document or role field doesn't exist, this will evaluate to null.
      return exists(userDocPath) ? get(userDocPath).data.role : null;
    }

    function getAuthenticatedUserRole() {
      return isSignedIn() ? getRoleForUser(request.auth.uid) : null;
    }
    
    function getAuthenticatedUserData() {
      let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
      return isSignedIn() && exists(userDocPath) ? get(userDocPath).data : null;
    }


    function isAdmin() {
      return getAuthenticatedUserRole() == 'admin';
    }

    function isManagerRole() { // Specific check for 'manager' role
      return getAuthenticatedUserRole() == 'manager';
    }
    
    function isStaffRole() { // Specific check for 'staff' role
      return getAuthenticatedUserRole() == 'staff';
    }

    function isManager() { // Broader: 'manager' OR 'admin'
      let role = getAuthenticatedUserRole();
      return role == 'manager' || role == 'admin';
    }

    function isStaff() { // Broader: 'staff' OR 'manager' OR 'admin'
      let role = getAuthenticatedUserRole();
      return role == 'staff' || role == 'manager' || role == 'admin';
    }
    
    function isManagerOfSite(siteId) {
      let userData = getAuthenticatedUserData();
      return isManagerRole() &&
             userData != null && 
             userData.managedSiteIds != null &&
             siteId in userData.managedSiteIds;
    }

    // --- Users Collection (/users/{userId}) ---
    match /users/{userId} {
      // Admins and Managers can read any user. Users can read their own.
      allow read: if isUser(userId) || isAdmin() || isManagerRole();

      // Users can create their own document upon sign-up, with role 'staff' and specific fields.
      allow create: if isUser(userId) &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.role == 'staff' &&
                       request.resource.data.keys().hasOnly(['uid', 'email', 'role', 'displayName', 'createdAt', 
                                                              'defaultSiteId', 'defaultStallId', 'managedSiteIds',
                                                              'defaultItemSearchTerm', 'defaultItemCategoryFilter', 
                                                              'defaultItemStockStatusFilter', 'defaultItemStallFilterOption',
                                                              'defaultSalesDateRangeFrom', 'defaultSalesDateRangeTo',
                                                              'defaultSalesStaffFilter']) &&
                       request.resource.data.defaultSiteId == null &&
                       request.resource.data.defaultStallId == null &&
                       request.resource.data.managedSiteIds == null &&
                       request.resource.data.defaultItemSearchTerm == null &&
                       request.resource.data.defaultItemCategoryFilter == null &&
                       request.resource.data.defaultItemStockStatusFilter == null &&
                       request.resource.data.defaultItemStallFilterOption == null &&
                       request.resource.data.defaultSalesDateRangeFrom == null &&
                       request.resource.data.defaultSalesDateRangeTo == null &&
                       request.resource.data.defaultSalesStaffFilter == null;
                       
      // Users can update their own profiles (excluding certain fields). Admins can update anything.
      allow update: if (isUser(userId) &&
                        !request.resource.data.keys().hasAny(['role', 'uid', 'email', 'createdAt', 'managedSiteIds']) && // User can't change these for themselves
                        (getAuthenticatedUserRole() != 'staff' || !request.resource.data.keys().hasAny(['defaultSiteId', 'defaultStallId'])) // Staff can't change their defaults
                       ) || isAdmin(); // Admin can update anything

      // Only admins can delete users, and not themselves.
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // --- Sites Collection (/sites/{siteId}) ---
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- Stalls Collection (/stalls/{stallId}) ---
    match /stalls/{stallId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- StockItems Collection (/stockItems/{itemId}) ---
    match /stockItems/{itemId} {
      allow read: if isStaff(); // staff, manager, or admin

      allow create: if isStaff() && // staff, manager, or admin
                       request.resource.data.siteId != null &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.quantity is number && request.resource.data.quantity >= 0 &&
                       request.resource.data.price is number && request.resource.data.price >= 0 &&
                       request.resource.data.lastUpdated is string;

      allow update: if isStaff() && // staff, manager, or admin
                       resource.data.siteId != null && 
                       request.resource.data.lastUpdated is string;

      // Managers can delete items from sites they manage. Staff can delete from their default assigned site. Admins implicitly through isManager().
      allow delete: if (isManagerRole() && isManagerOfSite(resource.data.siteId)) || 
                     (isStaffRole() && resource.data.siteId == getAuthenticatedUserData().defaultSiteId) ||
                     isAdmin();
    }

    // --- SalesTransactions Collection (/salesTransactions/{transactionId}) ---
    match /salesTransactions/{transactionId} {
      allow create: if isStaff() && // staff, manager, or admin can create
                       request.resource.data.staffId == request.auth.uid &&
                       request.resource.data.siteId != null &&
                       request.resource.data.stallId != null &&
                       request.resource.data.isDeleted == false &&
                       request.resource.data.items is list && request.resource.data.items.size() > 0 &&
                       request.resource.data.totalAmount is number && request.resource.data.totalAmount > 0 &&
                       request.resource.data.transactionDate is timestamp;

      allow read: if (getAuthenticatedUserRole() == 'staff' && resource.data.staffId == request.auth.uid) || // Staff can read their own
                     (isManagerRole() && resource.data.siteId in getAuthenticatedUserData().managedSiteIds) || // Manager can read for their managed sites
                     isAdmin(); // Admin can read all

      // Only admins can "soft delete" (update specific fields)
      allow update: if isAdmin() &&
                       request.resource.data.isDeleted == true &&
                       request.resource.data.deletedBy == request.auth.uid &&
                       request.resource.data.deletionJustification is string &&
                       // Prevent changing other fields during soft delete
                       !request.resource.data.keys().hasAny(['items', 'totalAmount', 'transactionDate', 'staffId', 'siteId', 'stallId']);

      allow delete: if false; // Hard delete disallowed; use soft delete
    }

    // --- StockMovementLogs Collection (/stockMovementLogs/{logId}) ---
    match /stockMovementLogs/{logId} {
      // Users can log their own movements.
      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.stockItemId is string &&
                       request.resource.data.siteId is string &&
                       request.resource.data.type is string &&
                       request.resource.data.quantityChange is number &&
                       request.resource.data.quantityBefore is number &&
                       request.resource.data.quantityAfter is number &&
                       request.resource.data.timestamp is string;

      // Admins or managers for their respective sites can read logs.
      allow read: if isAdmin() ||
                     (isManagerRole() && resource.data.siteId in getAuthenticatedUserData().managedSiteIds);

      allow update, delete: if false; // Logs are immutable
    }
    
    // --- userGoogleOAuthTokens Collection (/userGoogleOAuthTokens/{userId}) ---
    match /userGoogleOAuthTokens/{userId} {
      allow read, write, delete: if isUser(userId); // User can manage their own tokens
      allow create: if isUser(userId) && // Specific fields for creation
                      request.resource.data.access_token is string &&
                      request.resource.data.refresh_token is string;
    }
  }
}
