
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isAuthOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isManager() {
        return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }
    
    function isStaff() {
        return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'staff';
    }
    
    function isManagerOfSite(siteId) {
        return isManager() && siteId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managedSiteIds;
    }

    // --- Start of Rules ---

    // Users:
    // - Admins can read/write any user doc.
    // - Authenticated users can read their own doc.
    // - Authenticated users can update ONLY their own displayName and preferences.
    match /users/{userId} {
      allow read: if isAdmin() || isAuthOwner(userId);
      allow create: if isAdmin();
      allow update: if isAdmin() || 
                      (isAuthOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'defaultSiteId', 'defaultStallId', 'defaultItemSearchTerm', 'defaultItemCategoryFilter', 'defaultItemStockStatusFilter', 'defaultItemStallFilterOption', 'defaultSalesDateRangeFrom', 'defaultSalesDateRangeTo', 'defaultSalesStaffFilter']));
      allow delete: if isAdmin();
    }
    
    // Sites: 
    // - Admins can do anything.
    // - Managers and Staff can only read.
    match /sites/{siteId} {
      allow read: if isAuth();
      allow create, update, delete: if isAdmin();
    }
    
    // Stalls:
    // - Admins can do anything.
    // - Managers and Staff can only read.
    match /stalls/{stallId} {
       allow read: if isAuth();
       allow create, update, delete: if isAdmin();
    }
    
    // Stock Items:
    // - Admins can do anything.
    // - Managers can do anything for items within their managed sites.
    // - Staff can read items in their assigned site.
    // - Staff can ONLY update 'quantity' and 'lastUpdated' of items in their assigned stall.
    match /stockItems/{itemId} {
      allow read: if (isAuth() && resource.data.siteId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.defaultSiteId) || 
                     (isManager() && resource.data.siteId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managedSiteIds) || 
                     isAdmin();
      allow create: if (isManager() && request.resource.data.siteId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managedSiteIds) || 
                       isAdmin();
      allow update: if (isStaff() && request.resource.data.stallId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.defaultStallId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['quantity', 'lastUpdated'])) ||
                      (isManager() && request.resource.data.siteId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managedSiteIds) || 
                      isAdmin();
      allow delete: if (isManager() && resource.data.siteId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managedSiteIds) || 
                       isAdmin();
    }
    
    // Sales Transactions:
    // - Authenticated users can create sales for their own context.
    // - Managers/Admins can read sales within their assigned/any site.
    // - Staff can read sales they created.
    // - Only Admins can "soft delete" (update a specific deletion field). No one can hard delete.
    match /salesTransactions/{saleId} {
        allow create: if isAuth() && request.resource.data.staffId == request.auth.uid;
        allow read: if (isManager() && resource.data.siteId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managedSiteIds) ||
                       (isStaff() && resource.data.staffId == request.auth.uid) ||
                       isAdmin();
        allow update: if isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isDeleted', 'deletedAt', 'deletedBy', 'deletionJustification']);
        allow delete: if false; // Prevent hard deletes
    }

    // Stock Movement Logs: Immutable records
    match /stockMovementLogs/{logId} {
        allow read: if isManager() || isAdmin();
        allow create: if isAuth(); // Log creation is tied to another action's success.
        allow update, delete: if false; // Logs should be immutable
    }

    // Food Stall Expenses
    match /foodItemExpenses/{expenseId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.resource.data.recordedByUid == request.auth.uid;
      allow update: if (isManager() || isAdmin()) || 
                       (isAuth() && request.auth.uid == resource.data.recordedByUid);
      allow delete: if isAdmin() || (isManager() && resource.data.siteId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managedSiteIds);
    }
    
    // Food Stall Sales Summaries
    match /foodSaleTransactions/{saleId} {
      allow read: if isAuth();
      allow create, update: if isAuth(); // Assuming creator can update their own daily summary
      allow delete: if isAdmin() || (isManager() && resource.data.siteId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managedSiteIds);
    }

    // Food Stall Activity Logs
    match /foodStallActivityLogs/{logId} {
        allow read: if isManager() || isAdmin();
        allow create: if isAuth();
        allow update, delete: if false;
    }
    
    // Food Vendors
    match /foodVendors/{vendorId} {
      allow read: if isAuth();
      allow create, delete: if isManager() || isAdmin();
      allow update: if false; // Vendor names should be unique, better to delete and re-add.
    }
    
    // Staff Management Collections
    match /staffDetails/{userId} {
      allow read: if isManager() || isAdmin() || isAuthOwner(userId);
      allow create, update: if isAdmin();
      allow delete: if false;
    }
    
    match /staffAttendance/{attendanceId} {
      allow read, create, update, delete: if isManager() || isAdmin();
    }

    match /advances/{advanceId} {
       allow read, create: if isManager() || isAdmin();
       allow update, delete: if false; // Immutable
    }
    
    match /salaryPayments/{paymentId} {
       allow read, create: if isManager() || isAdmin();
       allow update, delete: if false; // Immutable
    }

    match /staffActivityLogs/{logId} {
        allow read: if isManager() || isAdmin();
        allow create: if isAuth();
        allow update, delete: if false; // Immutable
    }
    
    match /holidays/{holidayId} {
        allow read: if isAuth();
        allow create, delete: if isAdmin();
        allow update: if false;
    }

    // User OAuth Tokens: Highly restricted
    match /user_tokens/{userId} {
      allow read, create, update: if isAuthOwner(userId);
      allow delete: if isAuthOwner(userId);
      // No one else can access this data
    }
  }
}

    