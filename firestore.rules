rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData() {
      // Returns the data of the currently authenticated user.
      // This function assumes the user document exists.
      // Rule evaluation will fail gracefully if it doesn't.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getUserRole() {
      // Directly access role, Firestore handles non-existent paths.
      // Will not cause an error if doc or role field doesn't exist,
      // but comparisons against it will likely fail.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getUserRole() == 'admin';
    }

    function isManagerRole() { // Specific check for 'manager' role
      return isSignedIn() && getUserRole() == 'manager';
    }
    
    function isStaffRole() { // Specific check for 'staff' role
      return isSignedIn() && getUserRole() == 'staff';
    }

    function isManager() { // Broader: 'manager' OR 'admin'
      let role = getUserRole();
      return isSignedIn() && (role == 'manager' || role == 'admin');
    }

    function isStaff() { // Broader: 'staff' OR 'manager' OR 'admin'
      let role = getUserRole();
      return isSignedIn() && (role == 'staff' || role == 'manager' || role == 'admin');
    }
    
    function isManagerOfSite(siteId) {
      let userData = getUserData();
      // Ensure managedSiteIds exists and is a list before checking.
      return isManagerRole() &&
             userData.managedSiteIds != null &&
             siteId in userData.managedSiteIds;
    }

    // --- Users Collection (/users/{userId}) ---
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin() || isManagerRole(); // Manager can read any user, Admin can read any user.

      // Allow user to create their own document on first sign-in
      allow create: if isUser(userId) &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.role == 'staff' &&
                       // Check that only expected fields are present
                       request.resource.data.keys().hasOnly(['uid', 'email', 'role', 'displayName', 'createdAt', 
                                                              'defaultSiteId', 'defaultStallId', 'managedSiteIds',
                                                              'defaultItemSearchTerm', 'defaultItemCategoryFilter', 
                                                              'defaultItemStockStatusFilter', 'defaultItemStallFilterOption',
                                                              'defaultSalesDateRangeFrom', 'defaultSalesDateRangeTo',
                                                              'defaultSalesStaffFilter']) &&
                       // Ensure role-specific and preference fields are initialized as null/defaults by AuthContext
                       request.resource.data.defaultSiteId == null &&
                       request.resource.data.defaultStallId == null &&
                       request.resource.data.managedSiteIds == null &&
                       request.resource.data.defaultItemSearchTerm == null &&
                       request.resource.data.defaultItemCategoryFilter == null &&
                       request.resource.data.defaultItemStockStatusFilter == null &&
                       request.resource.data.defaultItemStallFilterOption == null &&
                       request.resource.data.defaultSalesDateRangeFrom == null &&
                       request.resource.data.defaultSalesDateRangeTo == null &&
                       request.resource.data.defaultSalesStaffFilter == null;
                       
      allow update: if (isUser(userId) &&
                        // User cannot change their own role, uid, email, createdAt, or managedSiteIds array directly
                        !request.resource.data.keys().hasAny(['role', 'uid', 'email', 'createdAt', 'managedSiteIds']) &&
                        // Staff cannot change their own defaultSiteId or defaultStallId (admin does this)
                        (getUserRole() != 'staff' || !request.resource.data.keys().hasAny(['defaultSiteId', 'defaultStallId']))
                       ) || isAdmin(); // Admin can update anything

      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // --- Sites Collection (/sites/{siteId}) ---
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- Stalls Collection (/stalls/{stallId}) ---
    match /stalls/{stallId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- StockItems Collection (/stockItems/{itemId}) ---
    match /stockItems/{itemId} {
      allow read: if isStaff(); // staff, manager, admin can read

      allow create: if isStaff() && // staff, manager, admin can create
                       request.resource.data.siteId != null &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.quantity is number && request.resource.data.quantity >= 0 &&
                       request.resource.data.price is number && request.resource.data.price >= 0 &&
                       request.resource.data.lastUpdated is string;

      allow update: if isStaff() && // staff, manager, admin can update
                       resource.data.siteId != null && // Prevent changing siteId after creation by non-admin? Or allow if admin?
                       request.resource.data.lastUpdated is string;
                       // No rule against changing stallId or originalMasterItemId for now

      allow delete: if isManager() || isStaffRole() && resource.data.siteId == getUserData().defaultSiteId; // Manager for any of their sites, staff for their default site
    }

    // --- SalesTransactions Collection (/salesTransactions/{transactionId}) ---
    match /salesTransactions/{transactionId} {
      allow create: if isStaff() && // staff, manager, admin can create
                       request.resource.data.staffId == request.auth.uid &&
                       request.resource.data.siteId != null &&
                       request.resource.data.stallId != null &&
                       request.resource.data.isDeleted == false &&
                       request.resource.data.items is list && request.resource.data.items.size() > 0 &&
                       request.resource.data.totalAmount is number && request.resource.data.totalAmount > 0 &&
                       request.resource.data.transactionDate is timestamp;

      allow read: if (getUserRole() == 'staff' && resource.data.staffId == request.auth.uid) ||
                     (isManagerRole() && resource.data.siteId in getUserData().managedSiteIds) ||
                     isAdmin();

      allow update: if isAdmin() &&
                       request.resource.data.isDeleted == true &&
                       request.resource.data.deletedBy == request.auth.uid &&
                       request.resource.data.deletionJustification is string &&
                       // Prevent changing other fields during soft delete
                       !request.resource.data.keys().hasAny(['items', 'totalAmount', 'transactionDate', 'staffId', 'siteId', 'stallId']);

      allow delete: if false; // Use soft delete (update isDeleted field)
    }

    // --- StockMovementLogs Collection (/stockMovementLogs/{logId}) ---
    match /stockMovementLogs/{logId} {
      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.stockItemId is string &&
                       request.resource.data.siteId is string &&
                       request.resource.data.type is string &&
                       request.resource.data.quantityChange is number &&
                       request.resource.data.quantityBefore is number &&
                       request.resource.data.quantityAfter is number &&
                       request.resource.data.timestamp is string;

      allow read: if isAdmin() ||
                     (isManagerRole() && resource.data.siteId in getUserData().managedSiteIds);

      allow update, delete: if false;
    }
    
    // --- userGoogleOAuthTokens Collection (/userGoogleOAuthTokens/{userId}) ---
    match /userGoogleOAuthTokens/{userId} {
      allow read, write, delete: if isUser(userId);
      allow create: if isUser(userId) &&
                      request.resource.data.access_token is string &&
                      request.resource.data.refresh_token is string;
    }
  }
}
