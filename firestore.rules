
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Corrected: Firestore functions should be more expression-based
    function getUserRole() {
      // If the user document or 'role' field doesn't exist,
      // comparisons like (getUserRole() == 'admin') will correctly evaluate to false.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getUserRole() == 'admin';
    }

    function isManager() {
      // A user is a manager if their role is 'manager' OR 'admin'
      return isSignedIn() && (getUserRole() == 'manager' || getUserRole() == 'admin');
    }

    function isStaff() {
      // A user is considered staff if their role is 'staff', 'manager', OR 'admin' (hierarchical)
      return isSignedIn() && (getUserRole() == 'staff' || getUserRole() == 'manager' || getUserRole() == 'admin');
    }

    // --- Users Collection (/users/{userId}) ---
    match /users/{userId} {
      // Read: User can read their own data. Admin/Manager can read any user's data.
      allow read: if isUser(userId) || isManager();

      // Create: Only during signup, new user gets 'staff' role.
      // User must be creating their own document.
      allow create: if isUser(userId) &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.role == 'staff' &&
                       // Ensure defaultSiteId/StallId are not set during initial user creation by user
                       !(request.resource.data.keys().hasAny(['defaultSiteId', 'defaultStallId']));


      // Update:
      // 1. User can update their own non-critical fields.
      // 2. Admin can update any user's fields (primarily for 'role' and defaults).
      // 3. Manager can update their own non-critical fields.
      allow update: if (isUser(userId) &&
                        // User cannot change their own role, uid, email, or createdAt
                        !request.resource.data.keys().hasAny(['role', 'uid', 'email', 'createdAt']) &&
                        // Staff cannot change their defaultSiteId or defaultStallId
                        (getUserRole() != 'staff' || !request.resource.data.keys().hasAny(['defaultSiteId', 'defaultStallId']))
                       ) || isAdmin(); // Admin can update any field

      // Delete: Admin can delete any user *except themselves*.
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // --- Sites Collection (/sites/{siteId}) ---
    match /sites/{siteId} {
      // Read: Any authenticated user can read site information.
      allow read: if isSignedIn();

      // Create, Update, Delete: Only Admins.
      allow create, update, delete: if isAdmin();
    }

    // --- Stalls Collection (/stalls/{stallId}) ---
    match /stalls/{stallId} {
      // Read: Any authenticated user can read stall information.
      allow read: if isSignedIn();

      // Create, Update, Delete: Only Admins.
      allow create, update, delete: if isAdmin();
    }

    // --- StockItems Collection (/stockItems/{itemId}) ---
    match /stockItems/{itemId} {
      // Read: Any staff, manager, or admin.
      allow read: if isStaff();

      // Create:
      allow create: if isStaff() &&
                       request.resource.data.siteId != null &&
                       (
                         isAdmin() || // Admin can create for any site/stall
                         (isManager() && request.resource.data.siteId == getUserData().defaultSiteId) || // Manager for their default site
                         (isStaff() && request.resource.data.siteId == getUserData().defaultSiteId &&
                                      request.resource.data.stallId == getUserData().defaultStallId) // Staff for their default site & stall
                       ) &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.quantity is number && request.resource.data.quantity >= 0 &&
                       request.resource.data.price is number && request.resource.data.price >= 0 &&
                       request.resource.data.lastUpdated is string;

      // Update:
      allow update: if isStaff() &&
                       resource.data.siteId != null &&
                       (
                         isAdmin() ||
                         (isManager() && resource.data.siteId == getUserData().defaultSiteId) ||
                         (isStaff() && resource.data.siteId == getUserData().defaultSiteId &&
                                      resource.data.stallId == getUserData().defaultStallId)
                       ) &&
                       request.resource.data.lastUpdated is string;


      // Delete:
      allow delete: if isAdmin() ||
                       (isManager() && resource.data.siteId == getUserData().defaultSiteId);
    }

    // --- SalesTransactions Collection (/salesTransactions/{transactionId}) ---
    match /salesTransactions/{transactionId} {
      // Create:
      allow create: if isStaff() &&
                       request.resource.data.staffId == request.auth.uid &&
                       request.resource.data.siteId != null &&
                       request.resource.data.stallId != null &&
                       (
                         isAdmin() ||
                         (isManager() && request.resource.data.siteId == getUserData().defaultSiteId && request.resource.data.stallId != null) ||
                         (isStaff() && request.resource.data.siteId == getUserData().defaultSiteId &&
                                      request.resource.data.stallId == getUserData().defaultStallId)
                       ) &&
                       request.resource.data.isDeleted == false &&
                       request.resource.data.items is list && request.resource.data.items.size() > 0 &&
                       request.resource.data.totalAmount is number && request.resource.data.totalAmount > 0 &&
                       request.resource.data.transactionDate is timestamp;

      // Read:
      allow read: if (isStaff() && resource.data.staffId == request.auth.uid) || // Staff can read their own sales
                     (isManager() && resource.data.siteId == getUserData().defaultSiteId) || // Manager can read sales for their default site
                     isAdmin(); // Admin can read all sales

      // Update (for soft delete by Admin only):
      allow update: if isAdmin() &&
                       request.resource.data.isDeleted == true &&
                       request.resource.data.deletedBy == request.auth.uid &&
                       request.resource.data.deletionJustification is string &&
                       // Prevent changing other critical fields during a soft delete
                       !request.resource.data.keys().hasAny(['items', 'totalAmount', 'transactionDate', 'staffId']);


      // Hard Delete: Disallowed for audit trail.
      allow delete: if false;
    }

    // --- StockMovementLogs Collection (/stockMovementLogs/{logId}) ---
    match /stockMovementLogs/{logId} {
      // Create: Authenticated user performing an action; userId in log must match.
      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.stockItemId is string &&
                       request.resource.data.siteId is string &&
                       request.resource.data.type is string &&
                       request.resource.data.quantityChange is number &&
                       request.resource.data.quantityBefore is number &&
                       request.resource.data.quantityAfter is number &&
                       request.resource.data.timestamp is string;

      // Read:
      allow read: if isAdmin() ||
                     (isManager() && resource.data.siteId == getUserData().defaultSiteId);

      // Update, Delete: Disallowed to maintain log integrity.
      allow update, delete: if false;
    }

    // --- userGoogleOAuthTokens Collection (/userGoogleOAuthTokens/{userId}) ---
    match /userGoogleOAuthTokens/{userId} {
      // Only the user themselves can read/write/delete their own tokens.
      allow read, write, delete: if isUser(userId);
      allow create: if isUser(userId) &&
                      request.resource.data.access_token is string &&
                      request.resource.data.refresh_token is string;
    }
  }
}

    