
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getAuthenticatedUserData() {
      // Returns the data of the currently authenticated user.
      // Checks for document existence before accessing data.
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.exists ? userDoc.data : null;
    }

    function getAuthenticatedUserRole() {
      // Returns the role of the currently authenticated user.
      // Returns null if user document or role doesn't exist.
      let userData = getAuthenticatedUserData();
      return userData != null && userData.role != null ? userData.role : null;
    }

    function isAdmin() {
      return isSignedIn() && getAuthenticatedUserRole() == 'admin';
    }

    function isManagerRole() {
      return isSignedIn() && getAuthenticatedUserRole() == 'manager';
    }
    
    function isStaffRole() {
      return isSignedIn() && getAuthenticatedUserRole() == 'staff';
    }

    // Function to check if current user is a manager or admin
    function isManagerOrAdmin() {
      let role = getAuthenticatedUserRole();
      return isSignedIn() && (role == 'manager' || role == 'admin');
    }

    // Function to check if current user is staff, manager or admin
    function isStaffManagerOrAdmin() {
      let role = getAuthenticatedUserRole();
      return isSignedIn() && (role == 'staff' || role == 'manager' || role == 'admin');
    }
    
    function isManagerOfSite(siteId) {
      let userData = getAuthenticatedUserData();
      return isManagerRole() &&
             userData != null &&
             userData.managedSiteIds != null &&
             userData.managedSiteIds.hasAny([siteId]); // Use hasAny for list membership
    }

    // --- Users Collection (/users/{userId}) ---
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin() || isManagerRole();

      // Admin creating a user document after Auth user is created by callable function
      allow create: if isAdmin() && 
                       request.resource.data.uid == userId && // Doc ID must match uid field
                       request.resource.data.email is string &&
                       request.resource.data.role is string && (request.resource.data.role == 'staff' || request.resource.data.role == 'manager' || request.resource.data.role == 'admin') &&
                       request.resource.data.keys().hasOnly([
                         'uid', 'email', 'role', 'displayName', 'createdAt', 
                         'defaultSiteId', 'defaultStallId', 'managedSiteIds',
                         'defaultItemSearchTerm', 'defaultItemCategoryFilter', 'defaultItemStockStatusFilter',
                         'defaultItemStallFilterOption', 'defaultSalesDateRangeFrom', 'defaultSalesDateRangeTo',
                         'defaultSalesStaffFilter', 'photoURL' // Added photoURL as it might be set
                        ]) &&
                       (request.resource.data.defaultSiteId == null || request.resource.data.defaultSiteId is string) &&
                       (request.resource.data.defaultStallId == null || request.resource.data.defaultStallId is string) &&
                       (request.resource.data.managedSiteIds == null || request.resource.data.managedSiteIds is list) &&
                       (request.resource.data.defaultItemSearchTerm == null || request.resource.data.defaultItemSearchTerm is string) &&
                       (request.resource.data.defaultItemCategoryFilter == null || request.resource.data.defaultItemCategoryFilter is string) &&
                       (request.resource.data.defaultItemStockStatusFilter == null || request.resource.data.defaultItemStockStatusFilter is string) &&
                       (request.resource.data.defaultItemStallFilterOption == null || request.resource.data.defaultItemStallFilterOption is string) &&
                       (request.resource.data.defaultSalesDateRangeFrom == null || request.resource.data.defaultSalesDateRangeFrom is string) &&
                       (request.resource.data.defaultSalesDateRangeTo == null || request.resource.data.defaultSalesDateRangeTo is string) &&
                       (request.resource.data.defaultSalesStaffFilter == null || request.resource.data.defaultSalesStaffFilter is string) &&
                       (request.resource.data.photoURL == null || request.resource.data.photoURL is string);


      allow update: if (isUser(userId) &&
                        !request.resource.data.keys().hasAny(['role', 'uid', 'email', 'createdAt', 'managedSiteIds']) &&
                        (getAuthenticatedUserRole() != 'staff' || !request.resource.data.keys().hasAny(['defaultSiteId', 'defaultStallId']))
                       ) || isAdmin();

      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // --- Sites Collection (/sites/{siteId}) ---
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- Stalls Collection (/stalls/{stallId}) ---
    match /stalls/{stallId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- StockItems Collection (/stockItems/{itemId}) ---
    match /stockItems/{itemId} {
      allow read: if isStaffManagerOrAdmin(); 

      allow create: if isStaffManagerOrAdmin() && 
                       request.resource.data.siteId != null &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.quantity is number && request.resource.data.quantity >= 0 &&
                       request.resource.data.price is number && request.resource.data.price >= 0 &&
                       request.resource.data.lastUpdated is string;

      allow update: if isStaffManagerOrAdmin() && 
                       resource.data.siteId != null && 
                       request.resource.data.lastUpdated is string;

      allow delete: if isManagerOrAdmin() || (isStaffRole() && resource.data.siteId == getAuthenticatedUserData().defaultSiteId);
    }

    // --- SalesTransactions Collection (/salesTransactions/{transactionId}) ---
    match /salesTransactions/{transactionId} {
      allow create: if isStaffManagerOrAdmin() && 
                       request.resource.data.staffId == request.auth.uid &&
                       request.resource.data.siteId != null &&
                       request.resource.data.stallId != null &&
                       request.resource.data.isDeleted == false &&
                       request.resource.data.items is list && request.resource.data.items.size() > 0 &&
                       request.resource.data.totalAmount is number && request.resource.data.totalAmount > 0 &&
                       request.resource.data.transactionDate is timestamp;

      allow read: if (getAuthenticatedUserRole() == 'staff' && resource.data.staffId == request.auth.uid) ||
                     (isManagerRole() && resource.data.siteId in getAuthenticatedUserData().managedSiteIds) ||
                     isAdmin();

      allow update: if isAdmin() &&
                       request.resource.data.isDeleted == true &&
                       request.resource.data.deletedBy == request.auth.uid &&
                       request.resource.data.deletionJustification is string &&
                       !request.resource.data.keys().hasAny(['items', 'totalAmount', 'transactionDate', 'staffId', 'siteId', 'stallId']);

      allow delete: if false;
    }

    // --- StockMovementLogs Collection (/stockMovementLogs/{logId}) ---
    match /stockMovementLogs/{logId} {
      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.stockItemId is string &&
                       request.resource.data.siteId is string &&
                       request.resource.data.type is string &&
                       request.resource.data.quantityChange is number &&
                       request.resource.data.quantityBefore is number &&
                       request.resource.data.quantityAfter is number &&
                       request.resource.data.timestamp is string;

      allow read: if isAdmin() ||
                     (isManagerRole() && resource.data.siteId in getAuthenticatedUserData().managedSiteIds);

      allow update, delete: if false;
    }
    
    // --- userGoogleOAuthTokens Collection (/userGoogleOAuthTokens/{userId}) ---
    // These tokens are sensitive and should only be accessible by the user themselves.
    match /userGoogleOAuthTokens/{userId} {
      allow read, write, delete: if isUser(userId); // Only the user can manage their own tokens
      // Stricter create rule, ensuring essential token fields are present
      allow create: if isUser(userId) &&
                      request.resource.data.access_token is string &&
                      (request.resource.data.refresh_token is string || request.resource.data.refresh_token == null) && // Refresh token might not always be present initially
                      request.resource.data.token_type is string;
    }
  }
}

    