rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    function isAdmin() {
      return request.auth.uid != null && getUserData(request.auth.uid).role == 'admin';
    }
    function isManager() {
      return request.auth.uid != null && getUserData(request.auth.uid).role == 'manager';
    }
    function isStaff() {
      return request.auth.uid != null && getUserData(request.auth.uid).role == 'staff';
    }
    function getManagerSiteIds() {
      // Ensure managedSiteIds is treated as a list, even if null in Firestore
      return getUserData(request.auth.uid).managedSiteIds != null ? getUserData(request.auth.uid).managedSiteIds : [];
    }

    // --- Users Collection ---
    match /users/{userId} {
      allow read: if request.auth.uid != null && (isOwner(userId) || isAdmin());
      allow create: if request.auth.uid != null && isAdmin();
      allow update: if request.auth.uid != null &&
        (
          (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'defaultSiteId', 'defaultStallId', 'defaultItemSearchTerm', 'defaultItemCategoryFilter', 'defaultItemStockStatusFilter', 'defaultItemStallFilterOption', 'defaultSalesDateRangeFrom', 'defaultSalesDateRangeTo', 'defaultSalesStaffFilter'])) ||
          isAdmin()
        );
      allow delete: if isAdmin() && !isOwner(userId);
    }

    // --- Sites & Stalls (Admin Only Write) ---
    match /sites/{siteId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
    }
    match /stalls/{stallId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
    }

    // --- StockItems Collection ---
    function isUpdatingOwnContext(req, itemData) {
      let userData = getUserData(req.auth.uid);
      return itemData.siteId == userData.defaultSiteId;
    }
    function canUpdateStockQuantityForSale(req, itemResource) {
      return req.resource.data.diff(itemResource.data).affectedKeys().hasOnly(['quantity', 'lastUpdated']);
    }
    function isValidStockItemWrite(req, itemResource) {
       let incomingData = req.resource.data;
       return incomingData.name is string && incomingData.name.size() > 1 &&
              incomingData.category is string &&
              incomingData.quantity is number && incomingData.quantity >= 0 &&
              incomingData.unit is string &&
              incomingData.price is number && incomingData.price >= 0 &&
              incomingData.lowStockThreshold is number && incomingData.lowStockThreshold >= 0 &&
              incomingData.lastUpdated is string;
    }

    match /stockItems/{itemId} {
      allow read: if request.auth.uid != null && (
        isAdmin() ||
        (isManager() && resource.data.siteId in getManagerSiteIds()) ||
        (isStaff() && isUpdatingOwnContext(request, resource.data))
      );
      allow create: if request.auth.uid != null && (
        isAdmin() ||
        (isManager() && request.resource.data.siteId in getManagerSiteIds() && isValidStockItemWrite(request, resource))
      );
      allow update: if request.auth.uid != null && (
        isAdmin() ||
        (isManager() && resource.data.siteId in getManagerSiteIds() && (isValidStockItemWrite(request, resource) || canUpdateStockQuantityForSale(request, resource))) ||
        (isStaff() && isUpdatingOwnContext(request, resource.data) && canUpdateStockQuantityForSale(request, resource))
      );
      allow delete: if request.auth.uid != null && (
        isAdmin() ||
        (isManager() && resource.data.siteId in getManagerSiteIds())
        // Client-side logic must prevent deletion of master items with linked stock. This cannot be reliably checked in rules.
      );
    }

    // --- SalesTransactions Collection ---
    function isValidSaleWriteCommon(req, saleData) {
      return req.auth.uid == saleData.staffId &&
             saleData.totalAmount is number &&
             saleData.items is list &&
             saleData.isDeleted == false &&
             saleData.transactionDate is timestamp;
    }

    function isValidSaleContext(req, saleData) {
      let userData = getUserData(req.auth.uid);
      if (userData.role == 'staff') {
        return saleData.siteId == userData.defaultSiteId &&
               saleData.stallId == userData.defaultStallId &&
               saleData.stallId != null;
      }
      if (userData.role == 'manager') {
        let isSiteManaged = saleData.siteId in getManagerSiteIds();
        // Check that the stall being written to actually belongs to the site being written to.
        let isStallValid = saleData.stallId != null &&
                           get(/databases/$(database)/documents/stalls/$(saleData.stallId)).data.siteId == saleData.siteId;
        return isSiteManaged && isStallValid;
      }
      return isAdmin();
    }

    match /salesTransactions/{saleId} {
      allow read: if request.auth.uid != null && (
        isAdmin() ||
        (isManager() && resource.data.siteId in getManagerSiteIds()) ||
        (isStaff() && resource.data.staffId == request.auth.uid)
      );
      allow create: if request.auth.uid != null &&
        isValidSaleWriteCommon(request, request.resource.data) &&
        isValidSaleContext(request, request.resource.data);
      allow update: if isAdmin() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isDeleted', 'deletedAt', 'deletedBy', 'deletionJustification']);
      allow delete: if false;
    }

    // --- Other Collections ---
    match /stockMovementLogs/{logId} {
      allow write: if request.auth.uid != null; // Allow any authenticated user to write logs.
      allow read: if isAdmin();
    }
    match /userGoogleOAuthTokens/{userId} {
      allow read, write: if isOwner(userId);
    }
    match /foodItemExpenses/{expenseId} {
      allow read, create: if request.auth.uid != null; // Allow any authenticated user to create/read for now
      allow update, delete: if isAdmin() || (isManager() && resource.data.siteId in getManagerSiteIds());
    }
    match /foodSaleTransactions/{foodSaleId} {
      allow read, create: if request.auth.uid != null; // Allow any authenticated user to create/read for now
      allow update, delete: if isAdmin() || (isManager() && resource.data.siteId in getManagerSiteIds());
    }
  }
}
