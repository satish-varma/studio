
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isUserRole(role) {
      return isSignedIn() && getUserData().role == role;
    }
    
    function isAdmin() {
      return isUserRole('admin');
    }
    
    function isManager() {
      return isUserRole('manager');
    }

    function isStaff() {
       return isUserRole('staff');
    }

    function isManagerForSite(siteId) {
      return isManager() && siteId in getUserData().managedSiteIds;
    }
    
    function isStaffForSite(siteId) {
        return isStaff() && getUserData().defaultSiteId == siteId;
    }
    
    function hasAccessToSite(siteId) {
        return isAdmin() || isManagerForSite(siteId) || isStaffForSite(siteId);
    }

    // --- Collection Rules ---

    // Users: Read own, Admin can read/write any.
    match /users/{userId} {
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow create: if isAdmin(); // Only admins can create user documents via backend
      allow update: if (isSignedIn() && request.auth.uid == userId && !("role" in request.resource.data)) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Sites & Stalls: Admins can do anything, others can read.
    match /sites/{siteId} {
      allow read: if isSignedIn(); // All roles can read sites
      allow write: if isAdmin();
    }
    
    match /stalls/{stallId} {
      allow read: if isSignedIn(); // All roles can read stalls
      allow write: if isAdmin();
    }

    // Sales Transactions: Create for self, read based on context, soft delete by admin.
    match /salesTransactions/{saleId} {
      allow read: if hasAccessToSite(resource.data.siteId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.staffId && hasAccessToSite(request.resource.data.siteId);
      allow update: if isAdmin() && !("totalAmount" in request.resource.data); // Admins can mark as deleted, but not change financial data.
      allow delete: if false; // No hard deletes
    }
    
    // Stock Movement Logs: Immutable audit trail, created by server logic (backend rule needed if applicable)
    match /stockMovementLogs/{logId} {
      allow read: if isAdmin() || isManagerForSite(get(/databases/$(database)/documents/stockMovementLogs/$(logId)).data.siteId);
      allow write: if false; // Logs should be immutable from client
    }
    
    // Stock Items: Complex rules based on role and context.
    match /stockItems/{itemId} {
      allow read: if hasAccessToSite(resource.data.siteId);
      
      // Admins and managers of the site can create items. Staff can too.
      allow create: if hasAccessToSite(request.resource.data.siteId);
      
      // Admins and managers can update any field.
      // Staff can only update quantity of an item in their assigned stall.
      allow update: if isAdmin() || 
                       isManagerForSite(request.resource.data.siteId) ||
                       (isStaff() && 
                        resource.data.siteId == getUserData().defaultSiteId &&
                        resource.data.stallId == getUserData().defaultStallId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['quantity', 'lastUpdated'])
                       );
                       
      // Admins and managers can delete. Staff cannot.
      // Additional logic in ItemTable.tsx prevents master deletion if stall items have stock.
      allow delete: if isAdmin() || isManagerForSite(resource.data.siteId);
    }
    
    // Google OAuth Tokens: Only the user can access their own tokens
    match /userGoogleOAuthTokens/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // --- Food Stall Rules ---
    match /foodItemExpenses/{expenseId} {
        allow read: if hasAccessToSite(resource.data.siteId);
        allow create: if isSignedIn() && 
                         request.auth.uid == request.resource.data.recordedByUid &&
                         hasAccessToSite(request.resource.data.siteId);
        allow update, delete: if isAdmin() || 
                                 isManagerForSite(resource.data.siteId) ||
                                 (isSignedIn() && request.auth.uid == resource.data.recordedByUid);
    }

    match /foodSaleTransactions/{saleId} {
        allow read: if hasAccessToSite(resource.data.siteId);
        allow create, update: if isSignedIn() &&
                                request.auth.uid == request.resource.data.recordedByUid &&
                                hasAccessToSite(request.resource.data.siteId);
        allow delete: if isAdmin();
    }
    
    // Rules for Food Stall Activity Logs
    match /foodStallActivityLogs/{logId} {
      // Admins and Managers can read the logs for sites they manage.
      allow read: if isAdmin() || isManagerForSite(get(/databases/$(database)/documents/foodStallActivityLogs/$(logId)).data.siteId);
      
      // Logs are created by server-side logic, so client-side creation is denied.
      // Updates and deletes are also disallowed to maintain an immutable audit trail.
      allow write: if false;
    }
  }
}
