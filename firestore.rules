
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getUserRole() {
      // Ensure document and role field exist to avoid errors on non-existent/malformed user docs
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userData.data != null && userData.data.role != null ? userData.data.role : null;
    }

    function isAdmin() {
      return isSignedIn() && getUserRole() == 'admin';
    }

    // This function specifically checks if the role IS 'manager', not if user has manager privileges (admin also does)
    function isManagerRole() {
      return isSignedIn() && getUserRole() == 'manager';
    }

    // This function checks if user has AT LEAST manager privileges
    function isManagerPrivileges() {
      let role = getUserRole();
      return isSignedIn() && (role == 'manager' || role == 'admin');
    }
    
    // This function specifically checks if the role IS 'staff', not if user has staff privileges (manager/admin also do)
    function isStaffRole() {
      return isSignedIn() && getUserRole() == 'staff';
    }

    // This function checks if user has AT LEAST staff privileges
    function isStaffPrivileges() {
      let role = getUserRole();
      return isSignedIn() && (role == 'staff' || role == 'manager' || role == 'admin');
    }

    function isManagerOfSite(siteId) {
      let userData = getUserData();
      return isSignedIn() &&
             userData != null &&
             userData.role == 'manager' &&
             userData.managedSiteIds != null &&
             (siteId in userData.managedSiteIds); // 'in' checks for list membership
    }

    // --- Users Collection (/users/{userId}) ---
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin() || isManagerPrivileges(); // Managers/Admins can read users for staff filter

      allow create: if isUser(userId) &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.role == 'staff' &&
                       // Ensure these are not set during initial creation by user
                       !request.resource.data.keys().hasAny(['defaultSiteId', 'defaultStallId', 'managedSiteIds']);

      allow update: if (
                        isUser(userId) &&
                        // User cannot change their own role, uid, email, createdAt
                        !request.resource.data.keys().hasAny(['role', 'uid', 'email', 'createdAt']) &&
                        // Staff cannot change their own default site/stall
                        (getUserRole() != 'staff' || !request.resource.data.keys().hasAny(['defaultSiteId', 'defaultStallId'])) &&
                        // Staff/Managers cannot set managedSiteIds for themselves
                        (isAdmin() || !request.resource.data.keys().hasAny(['managedSiteIds']))
                       ) || isAdmin(); // Admin can update anything

      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // --- Sites Collection (/sites/{siteId}) ---
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- Stalls Collection (/stalls/{stallId}) ---
    match /stalls/{stallId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- StockItems Collection (/stockItems/{itemId}) ---
    match /stockItems/{itemId} {
      allow read: if isStaffPrivileges();

      allow create: if isStaffPrivileges() &&
                       request.resource.data.siteId != null &&
                       (
                         isAdmin() ||
                         isManagerOfSite(request.resource.data.siteId) ||
                         (isStaffRole() && request.resource.data.siteId == getUserData().defaultSiteId &&
                                      request.resource.data.stallId == getUserData().defaultStallId)
                       ) &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.quantity is number && request.resource.data.quantity >= 0 &&
                       request.resource.data.price is number && request.resource.data.price >= 0 &&
                       request.resource.data.lastUpdated is string;

      allow update: if isStaffPrivileges() &&
                       resource.data.siteId != null &&
                       (
                         isAdmin() ||
                         isManagerOfSite(resource.data.siteId) ||
                         (isStaffRole() && resource.data.siteId == getUserData().defaultSiteId &&
                                      resource.data.stallId == getUserData().defaultStallId)
                       ) &&
                       request.resource.data.lastUpdated is string &&
                       // Prevent changing siteId/stallId/originalMasterItemId on existing items except by admin or for specific operations handled by transactions
                       (isAdmin() || (!('siteId' in request.resource.data) && !('stallId' in request.resource.data) && !('originalMasterItemId' in request.resource.data)));


      allow delete: if isAdmin() || isManagerOfSite(resource.data.siteId);
    }

    // --- SalesTransactions Collection (/salesTransactions/{transactionId}) ---
    match /salesTransactions/{transactionId} {
      allow create: if isStaffPrivileges() &&
                       request.resource.data.staffId == request.auth.uid &&
                       request.resource.data.siteId != null &&
                       request.resource.data.stallId != null &&
                       (
                         isAdmin() ||
                         isManagerOfSite(request.resource.data.siteId) || // Manager can record sale for any stall in their managed site
                         (isStaffRole() && request.resource.data.siteId == getUserData().defaultSiteId &&
                                      request.resource.data.stallId == getUserData().defaultStallId)
                       ) &&
                       request.resource.data.isDeleted == false &&
                       request.resource.data.items is list && request.resource.data.items.size() > 0 &&
                       request.resource.data.totalAmount is number && request.resource.data.totalAmount > 0 &&
                       request.resource.data.transactionDate is timestamp;

      allow read: if (isStaffRole() && resource.data.staffId == request.auth.uid) ||
                     (isManagerPrivileges() && isManagerOfSite(resource.data.siteId)) ||
                     isAdmin();

      allow update: if isAdmin() &&
                       request.resource.data.isDeleted == true &&
                       resource.data.isDeleted == false && // Ensure it wasn't already soft-deleted
                       request.resource.data.deletedBy == request.auth.uid &&
                       request.resource.data.deletionJustification is string &&
                       // Only allow these specific fields to be changed for soft delete
                       !request.resource.data.keys().hasAny([
                          'items', 'totalAmount', 'transactionDate', 'staffId', 'staffName', 'siteId', 'stallId'
                       ]);

      allow delete: if false; // Hard deletes disabled, use soft delete via update
    }

    // --- StockMovementLogs Collection (/stockMovementLogs/{logId}) ---
    match /stockMovementLogs/{logId} {
      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.stockItemId is string &&
                       request.resource.data.siteId is string &&
                       request.resource.data.type is string &&
                       request.resource.data.quantityChange is number &&
                       request.resource.data.quantityBefore is number &&
                       request.resource.data.quantityAfter is number &&
                       request.resource.data.timestamp is string;

      allow read: if isAdmin() || isManagerOfSite(resource.data.siteId);

      allow update, delete: if false;
    }

    // --- userGoogleOAuthTokens Collection (/userGoogleOAuthTokens/{userId}) ---
    match /userGoogleOAuthTokens/{userId} {
      allow read, write, delete: if isUser(userId); // Assuming write covers create/update
      // 'create' is covered by 'write' if we don't need specific create-only fields validation here.
      // If specific create fields needed:
      // allow create: if isUser(userId) &&
      //                  request.resource.data.access_token is string &&
      //                  request.resource.data.refresh_token is string;
    }
  } // This is the closing brace for match /databases/{database}/documents
} // This is the closing brace for service cloud.firestore
    