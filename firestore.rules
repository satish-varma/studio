
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================================================
    // Helper Functions
    // =================================================================
    
    // Checks if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Checks if the user has a specific role
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Checks if the user is an admin
    function isAdmin() {
      return isAuthenticated() && hasRole('admin');
    }
    
    // Checks if the user is a manager of a given site
    function isManagerOfSite(siteId) {
        return isAuthenticated() && hasRole('manager') && siteId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managedSiteIds;
    }

    // Checks if the user is a staff member of a given site
    function isStaffOfSite(siteId) {
        return isAuthenticated() && hasRole('staff') && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.defaultSiteId == siteId;
    }

    // Checks if the user is a member (staff or manager) of a given site
    function isMemberOfSite(siteId) {
        return isManagerOfSite(siteId) || isStaffOfSite(siteId);
    }
    
    // =================================================================
    // Collection Rules
    // =================================================================
    
    // Users Collection
    // - Admins can read/write any user document.
    // - Authenticated users can read and update THEIR OWN document.
    // - Users CANNOT update their own 'role'.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create, delete, write: if isAdmin(); // write covers create/update/delete

      // Prevent users from changing their own role. Admins can change any role.
      allow update: if request.auth.uid == userId 
                    && request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['displayName', 'photoURL', 'defaultSiteId', 'defaultStallId', 
                                'defaultItemSearchTerm', 'defaultItemCategoryFilter', 'defaultItemStockStatusFilter', 
                                'defaultItemStallFilterOption', 'defaultSalesDateRangeFrom', 
                                'defaultSalesDateRangeTo', 'defaultSalesStaffFilter']);
    }

    // Sites & Stalls Collections
    // - Admins can do everything.
    // - Any authenticated user (staff, manager) can read sites/stalls to get context.
    match /sites/{siteId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    match /stalls/{stallId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // StockItems Collection
    // - Admins can do anything.
    // - Managers can do anything to items within their managed sites.
    // - Staff can read items in their assigned site and ONLY update quantity of items in their assigned stall.
    match /stockItems/{itemId} {
      allow read: if isAuthenticated() && (isAdmin() || isMemberOfSite(resource.data.siteId));

      // Create: Admin or Manager of the site.
      allow create: if isAuthenticated() && (isAdmin() || isManagerOfSite(request.resource.data.siteId));
      
      // Update: More complex logic
      allow update: if isAuthenticated() && (
        isAdmin() || 
        // Manager can update anything in their managed site
        (isManagerOfSite(resource.data.siteId) && request.resource.data.siteId == resource.data.siteId) || 
        // Staff can ONLY update quantity and lastUpdated, and only for their assigned stall
        (
          isStaffOfSite(resource.data.siteId) && 
          resource.data.stallId != null &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.defaultStallId == resource.data.stallId &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['quantity', 'lastUpdated']) &&
          request.resource.data.siteId == resource.data.siteId // Cannot change siteId
        )
      );

      // Delete: Admin or Manager of the site. With special checks for master stock.
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        (
          isManagerOfSite(resource.data.siteId) && 
          // Prevent deleting master stock if linked stall items have quantity > 0
          (resource.data.stallId != null || (
              resource.data.stallId == null && 
              !exists(/databases/$(database)/documents/stockItems?query=originalMasterItemId==$(itemId)&quantity>0)
          ))
        )
      );
      
      // Batch writes need special handling. The functions below allow for common batch operations.
      // - isAllocationAllowed: Manager allocates from master to stall
      // - isReturnToMasterAllowed: Staff/Manager returns from stall to master
      // - isTransferAllowed: Staff/Manager transfers between stalls in same site
      function isAllocationAllowed() {
        let masterId = request.resource.data.originalMasterItemId;
        let masterAfter = getAfter(/databases/$(database)/documents/stockItems/$(masterId));
        let masterBefore = get(/databases/$(database)/documents/stockItems/$(masterId));
        
        let quantityAllocated = request.resource.data.quantity;
        // if updating existing stall item:
        let stallItemBefore = getAfter(/databases/$(database)/documents/stockItems/$(itemId));
        if (existsAfter(/databases/$(database)/documents/stockItems/$(itemId))) {
          quantityAllocated = request.resource.data.quantity - get(/databases/$(database)/documents/stockItems/$(itemId)).data.quantity;
        }

        return masterAfter.data.quantity == masterBefore.data.quantity - quantityAllocated &&
               request.resource.data.siteId == masterBefore.data.siteId &&
               request.resource.data.originalMasterItemId == masterId;
      }
      
      function isReturnToMasterAllowed() {
          let stallItemBefore = get(/databases/$(database)/documents/stockItems/$(itemId));
          let masterId = stallItemBefore.data.originalMasterItemId;
          let masterBefore = get(/databases/$(database)/documents/stockItems/$(masterId));
          let masterAfter = getAfter(/databases/$(database)/documents/stockItems/$(masterId));
          
          let quantityReturned = stallItemBefore.data.quantity - request.resource.data.quantity;
          
          return masterAfter.data.quantity == masterBefore.data.quantity + quantityReturned;
      }

      function isTransferAllowed() {
        let sourceItem = get(/databases/$(database)/documents/stockItems/$(itemId));
        let destItemPath = /databases/$(database)/documents/stockItems/$(request.resource.id);
        let destItemAfter = getAfter(destItemPath);
        
        let qtyTransferred = sourceItem.data.quantity - request.resource.data.quantity;

        // If destination item is new
        if (!exists(destItemPath)) {
            return qtyTransferred > 0 &&
                   destItemAfter.data.quantity == qtyTransferred &&
                   destItemAfter.data.originalMasterItemId == sourceItem.data.originalMasterItemId &&
                   destItemAfter.data.siteId == sourceItem.data.siteId &&
                   destItemAfter.data.stallId != sourceItem.data.stallId;
        }
        
        // If destination item exists
        let destItemBefore = get(destItemPath);
        return qtyTransferred > 0 &&
               destItemAfter.data.quantity == destItemBefore.data.quantity + qtyTransferred &&
               destItemAfter.data.originalMasterItemId == sourceItem.data.originalMasterItemId &&
               destItemAfter.data.siteId == sourceItem.data.siteId &&
               destItemAfter.data.stallId != sourceItem.data.stallId;
      }
      
       // Allow batch writes for common, complex stock movements
      // allow write: if isAuthenticated() && (
      //   (isManagerOfSite(resource.data.siteId) && (isAllocationAllowed() || isReturnToMasterAllowed() || isTransferAllowed()))
      // );
    }

    // Sales Transactions
    match /salesTransactions/{saleId} {
      // Any authenticated member of the site can read its sales. Admin can read all.
      allow read: if isAuthenticated() && (isAdmin() || isMemberOfSite(resource.data.siteId));
      
      // Any member of the site can create a sale, but only for themselves. Admin can create for anyone.
      allow create: if isAuthenticated() && (
        isAdmin() ||
        (isMemberOfSite(request.resource.data.siteId) && request.auth.uid == request.resource.data.staffId)
      );
      
      // Only admin can "delete" (soft delete by updating fields) a sale.
      allow update: if isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isDeleted', 'deletedAt', 'deletedBy', 'deletionJustification']);
      
      // No one can permanently delete sales records.
      allow delete: if false;
    }
    
    // Stock Movement Logs
    // These are append-only, created by the system logic.
    // Read access is limited to admins for now for a complete audit trail.
    match /stockMovementLogs/{logId} {
      allow read: if isAdmin();
      allow write: if isAuthenticated(); // Should be locked down further in prod, but for now, any auth user triggering an action can write a log
    }

    // Google OAuth Tokens
    // Only the authenticated user can read/write their own tokens.
    match /userGoogleOAuthTokens/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // **NEW** Food Stall Collections
    match /foodVendors/{vendorId} {
      allow read, write: if isAuthenticated();
    }
    
    match /foodItemExpenses/{expenseId} {
      allow read, create: if isAuthenticated() && (isAdmin() || isMemberOfSite(request.resource.data.siteId));
      allow update, delete: if isAuthenticated() && (isAdmin() || isManagerOfSite(request.resource.data.siteId));
    }
    
    match /foodSaleTransactions/{dailySaleId} {
       allow read, write: if isAuthenticated() && (isAdmin() || isMemberOfSite(request.resource.data.siteId));
    }

    match /foodStallActivityLogs/{logId} {
      allow read: if isAuthenticated() && (isAdmin() || isManagerOfSite(resource.data.siteId));
      allow write: if isAuthenticated();
    }
  }
}
