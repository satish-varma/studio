rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      let userDocPath = /databases/$(database)/documents/users/$(userId);
      return exists(userDocPath) ? get(userDocPath).data : null;
    }

    function getAuthenticatedUserData() {
      return isSignedIn() ? getUserData(request.auth.uid) : null;
    }

    function getAuthenticatedUserRole() {
      let userData = getAuthenticatedUserData();
      return userData != null ? userData.role : null;
    }

    function isAdmin() {
      return getAuthenticatedUserRole() == 'admin';
    }

    function isManagerRole() {
      return getAuthenticatedUserRole() == 'manager';
    }

    function isStaffRole() {
      return getAuthenticatedUserRole() == 'staff';
    }

    function isManagerOfSite(siteId) {
      // A manager can only manage a site if they are assigned to it.
      // This helper checks if the currently authenticated user is a manager AND if the given siteId
      // is present in their `managedSiteIds` array.
      let userData = getAuthenticatedUserData();
      return isManagerRole() &&
             userData != null &&
             userData.managedSiteIds != null &&
             siteId in userData.managedSiteIds;
    }

    function isStaffAssignedTo(siteId, stallId) {
      // Checks if the authenticated user is staff and assigned to a specific site and stall.
      let userData = getAuthenticatedUserData();
      return isStaffRole() &&
             userData != null &&
             userData.defaultSiteId == siteId &&
             userData.defaultStallId == stallId;
    }
    
    function isStaffAssignedToSiteOnly(siteId) {
      // Checks if the authenticated user is staff and assigned to a specific site (stall is irrelevant).
      let userData = getAuthenticatedUserData();
      return isStaffRole() &&
             userData != null &&
             userData.defaultSiteId == siteId;
    }

    // --- Collections Rules ---

    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin() || isManagerRole();
      allow create: if isAdmin(); 
      allow update: if (isUser(userId) &&
                        !request.resource.data.keys().hasAny(['role', 'uid', 'email', 'createdAt']) &&
                        (getAuthenticatedUserRole() == 'admin' || 
                          (getAuthenticatedUserRole() == 'manager' && !request.resource.data.keys().hasAny(['managedSiteIds', 'defaultSiteId', 'defaultStallId'])) ||
                          (getAuthenticatedUserRole() == 'staff' && !request.resource.data.keys().hasAny(['managedSiteIds', 'defaultSiteId', 'defaultStallId']))
                        )
                       ) || isAdmin();
      allow delete: if isAdmin() && request.auth.uid != userId;
    }
    match /users {
      allow list: if isAdmin() || isManagerRole();
    }

    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    match /sites {
      allow list: if isSignedIn();
    }

    match /stalls/{stallId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    match /stalls {
      allow list: if isSignedIn();
    }

    match /stockItems/{itemId} {
      function isAllocationAllowed() {
        let master = resource.data;
        let stall = request.resource.data;
        return master.stallId == null &&
               stall.stallId != null &&
               stall.originalMasterItemId == master.id &&
               stall.siteId == master.siteId &&
               master.quantity - stall.quantity == request.resource.data.quantity; // Incorrect logic for allocation, needs to be based on change. Let's rely on granular checks.
      }
      function isReturnToMasterAllowed() {
          let stall = resource.data;
          let master = request.resource.data;
          return stall.stallId != null &&
                 stall.originalMasterItemId == master.id &&
                 stall.siteId == master.siteId &&
                 master.quantity - stall.quantity > 0; // Simplified
      }
      
      allow read: if isSignedIn() && 
                    (isAdmin() || 
                     (isManagerRole() && isManagerOfSite(resource.data.siteId)) || 
                     (isStaffRole() && isStaffAssignedToSiteOnly(resource.data.siteId))
                    );

      allow create: if request.resource.data.siteId != null &&
                       (isAdmin() ||
                        (isManagerRole() && isManagerOfSite(request.resource.data.siteId)) ||
                        (isStaffRole() && isStaffAssignedToSiteOnly(request.resource.data.siteId))
                       );

      allow update: if resource.data.siteId != null &&
                       (isAdmin() ||
                        (isManagerRole() && isManagerOfSite(resource.data.siteId)) ||
                        (isStaffRole() &&
                          (
                            (resource.data.stallId != null &&
                             isStaffAssignedTo(resource.data.siteId, resource.data.stallId) &&
                             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['quantity', 'lastUpdated'])
                            )
                          )
                        )
                       );

      allow delete: if resource.data.siteId != null &&
                       (isAdmin() ||
                        (isManagerRole() && 
                         isManagerOfSite(resource.data.siteId) &&
                         // Manager can't delete master item if linked stalls have stock
                         (resource.data.stallId != null || !exists(/databases/$(database)/documents/stockItems?where("originalMasterItemId", "==", resource.id).where("quantity", ">", 0)))
                        ) ||
                        (isStaffRole() && isStaffAssignedTo(resource.data.siteId, resource.data.stallId))
                       );
    }
    match /stockItems {
        allow list: if isSignedIn();
    }

    match /salesTransactions/{transactionId} {
      allow create: if isSignedIn() && 
                       request.resource.data.staffId == request.auth.uid && 
                       request.resource.data.siteId != null &&
                       request.resource.data.stallId != null &&
                       (isAdmin() || 
                        (isManagerRole() && isManagerOfSite(request.resource.data.siteId)) ||
                        (isStaffRole() && isStaffAssignedTo(request.resource.data.siteId, request.resource.data.stallId)) 
                       ) &&
                       request.resource.data.isDeleted == false;

      allow read: if (isStaffRole() && resource.data.staffId == request.auth.uid) || 
                     (isManagerRole() && isManagerOfSite(resource.data.siteId)) ||
                     isAdmin();

      allow update: if isAdmin() &&
                       request.resource.data.isDeleted == true &&
                       resource.data.isDeleted == false && 
                       request.resource.data.deletedBy == request.auth.uid &&
                       request.resource.data.deletionJustification is string && request.resource.data.deletionJustification.size() > 0 &&
                       !request.resource.data.keys().hasAny(['items', 'totalAmount', 'transactionDate', 'staffId', 'siteId', 'stallId']);

      allow delete: if false;
    }
    match /salesTransactions {
        allow list: if isSignedIn();
    }

    match /stockMovementLogs/{logId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || (isManagerRole() && isManagerOfSite(resource.data.siteId));
      allow update, delete: if false;
    }
    match /stockMovementLogs {
        allow list: if isAdmin() || isManagerRole();
    }
    
    // --- Food Stall Specific Rules ---
    match /foodItemExpenses/{expenseId} {
      allow create: if isSignedIn() &&
                       request.resource.data.recordedByUid == request.auth.uid &&
                       request.resource.data.siteId != null &&
                       request.resource.data.stallId != null &&
                       (isAdmin() ||
                        (isManagerRole() && isManagerOfSite(request.resource.data.siteId)) ||
                        (isStaffRole() && isStaffAssignedTo(request.resource.data.siteId, request.resource.data.stallId))
                       );
                       
      allow read: if isSignedIn() &&
                     (isAdmin() ||
                      (isManagerRole() && isManagerOfSite(resource.data.siteId)) ||
                      (isStaffRole() && isStaffAssignedTo(resource.data.siteId, resource.data.stallId))
                     );
                     
      allow update: if false;
      allow delete: if isAdmin();
    }
    
    match /foodSaleTransactions/{saleId} {
      allow create, update: if isSignedIn() &&
                         request.resource.data.recordedByUid == request.auth.uid &&
                         request.resource.data.siteId != null &&
                         request.resource.data.stallId != null &&
                         (isAdmin() ||
                          (isManagerRole() && isManagerOfSite(request.resource.data.siteId)) ||
                          (isStaffRole() && isStaffAssignedTo(request.resource.data.siteId, request.resource.data.stallId))
                         );

      allow read: if isSignedIn() &&
                     (isAdmin() ||
                      (isManagerRole() && isManagerOfSite(resource.data.siteId)) ||
                      (isStaffRole() && isStaffAssignedTo(resource.data.siteId, resource.data.stallId))
                     );
                     
      allow delete: if isAdmin();
    }

    match /foodStallActivityLogs/{logId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || (isManagerRole() && isManagerOfSite(resource.data.siteId));
      allow update, delete: if false;
    }
     match /foodStallActivityLogs {
        allow list: if isAdmin() || isManagerRole();
    }
    
    match /foodVendors/{vendorId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() || isManagerRole();
    }
    
    // --- Staff Management Rules ---
    match /staffDetails/{userId} {
      // Helper function to check if the authenticated user is a manager of the specified staff member's site.
      function isManagerOfStaff(staffUserId) {
        let staffData = getUserData(staffUserId);
        return staffData != null && isManagerOfSite(staffData.defaultSiteId);
      }

      allow read: if isUser(userId) || isAdmin() || isManagerOfStaff(userId);
      allow create, update: if isAdmin() || isManagerOfStaff(userId);
      allow delete: if isAdmin();
    }
    
    match /staffAttendance/{attendanceId} {
      function isManagerOfAttendedSite() {
        return isManagerOfSite(resource.data.siteId);
      }
      
      allow read: if isAdmin() || isManagerOfAttendedSite();
      allow create, update: if (isAdmin() || isManagerOfAttendedSite()) && 
                             request.resource.data.recordedByUid == request.auth.uid;
      allow delete: if isAdmin();
    }
    
    match /advances/{advanceId} {
       function isManagerOfAdvancedSite() {
        let staffData = getUserData(resource.data.staffUid);
        return staffData != null && isManagerOfSite(staffData.defaultSiteId);
      }
      
      allow read: if isAdmin() || isManagerOfAdvancedSite();
      allow create: if (isAdmin() || isManagerOfAdvancedSite()) &&
                       request.resource.data.recordedByUid == request.auth.uid;
      allow update: if false; // Advances should be immutable once created
      allow delete: if isAdmin();
    }
  }
}
