
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isManagerOrAdmin(userId) {
      let role = getUserRole(userId);
      return role == 'manager' || role == 'admin';
    }

    function isSiteManager(userId, siteId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return user.role == 'manager' && siteId in user.managedSiteIds;
    }

    function isStaffOfSite(userId, siteId) {
        let user = get(/databases/$(database)/documents/users/$(userId)).data;
        return user.role == 'staff' && user.defaultSiteId == siteId;
    }

    // --- Start Collection Rules ---

    // Users Collection
    match /users/{userId} {
      allow read: if isAuth() && (isUser(userId) || isManagerOrAdmin(request.auth.uid));
      allow create: if isAuth() && isManagerOrAdmin(request.auth.uid); // Admin creates users
      allow update: if isAuth() && (isUser(userId) || isManagerOrAdmin(request.auth.uid));
      // No one can delete a user document from the client to prevent accidental data loss.
      allow delete: if false; 
    }

    // Sites and Stalls (Admin only write access)
    match /sites/{siteId} {
      allow read: if isAuth();
      allow write: if isAuth() && isManagerOrAdmin(request.auth.uid); // Only admins should be creating/editing sites
    }
    match /stalls/{stallId} {
      allow read: if isAuth();
      allow write: if isAuth() && isManagerOrAdmin(request.auth.uid); // Only admins should be creating/editing stalls
    }

    // StockItems Collection
    match /stockItems/{itemId} {
      allow read: if isAuth();

      // Create: Staff can create items in their assigned context. Managers/Admins can create anywhere.
      allow create: if isAuth() && (
        isManagerOrAdmin(request.auth.uid) ||
        (isStaffOfSite(request.auth.uid, request.resource.data.siteId))
      );

      // Update: Staff can only update quantity. Managers can update any item in their managed sites. Admins can update any.
      allow update: if isAuth() && (
        isManagerOrAdmin(request.auth.uid) ||
        (isStaffOfSite(request.auth.uid, resource.data.siteId) && request.resource.data.keys().hasOnly(['quantity', 'lastUpdated']))
      );

      // Delete: Managers can delete items in their sites. Admins can delete any.
      // Deleting a master item should be blocked if it has linked stall items with stock > 0
      allow delete: if isAuth() && (
        isManagerOrAdmin(request.auth.uid) &&
        (resource.data.stallId != null || getAfter(/databases/$(database)/documents/stockItems?originalMasterItemId=$(itemId)&quantity=>0).size() == 0)
      );
    }
    
    // Sales Transactions
    match /salesTransactions/{saleId} {
        allow read: if isAuth();
        allow create: if isAuth() && (isUser(request.resource.data.staffId));
        // Only allow admins to "soft delete" by updating specific fields.
        allow update: if isAuth() && isManagerOrAdmin(request.auth.uid) && request.resource.data.keys().hasOnly(['isDeleted', 'deletedAt', 'deletedBy', 'deletionJustification']);
        // Nobody can hard-delete sales records.
        allow delete: if false;
    }
    
    // Stock Movement Logs (write-only for any authenticated user, no reads/updates from client)
    match /stockMovementLogs/{logId} {
        allow read, update, delete: if false;
        allow create: if isAuth();
    }
    
    // Staff Details Collection (/staffDetails/{userId})
    match /staffDetails/{userId} {
      allow read: if isAuth() && (isManagerOrAdmin(request.auth.uid));
      allow write: if isAuth() && isManagerOrAdmin(request.auth.uid);
    }

    // Staff Attendance Collection (/staffAttendance/{attendanceId})
    match /staffAttendance/{attendanceId} {
        allow read, write: if isAuth() && isManagerOrAdmin(request.auth.uid);
    }

    // Salary Advances Collection (/advances/{advanceId})
    match /advances/{advanceId} {
        allow read, write: if isAuth() && isManagerOrAdmin(request.auth.uid);
    }

    // Salary Payments Collection (/salaryPayments/{paymentId})
    match /salaryPayments/{paymentId} {
        allow read, write: if isAuth() && isManagerOrAdmin(request.auth.uid);
    }

    // Holidays Collection (/holidays/{holidayId})
    match /holidays/{holidayId} {
        allow read: if isAuth();
        allow write: if isAuth() && isManagerOrAdmin(request.auth.uid); // Only admins/managers can create/delete holidays
    }

    // Staff Activity Logs
    match /staffActivityLogs/{logId} {
        allow read: if isAuth() && isManagerOrAdmin(request.auth.uid);
        allow write: if isAuth(); // Logged by any authenticated user action
    }
    
    // Food Stall Vendors
    match /foodVendors/{vendorId} {
        allow read: if isAuth();
        allow write: if isAuth() && isManagerOrAdmin(request.auth.uid);
    }

    // Food Item Expenses
    match /foodItemExpenses/{expenseId} {
        allow read: if isAuth();
        allow create: if isAuth() && isManagerOrAdmin(request.auth.uid);
        allow update: if isAuth() && isManagerOrAdmin(request.auth.uid);
        allow delete: if isAuth() && isManagerOrAdmin(request.auth.uid);
    }

    // Food Sale Transactions
    match /foodSaleTransactions/{saleId} {
        allow read: if isAuth();
        allow write: if isAuth() && isManagerOrAdmin(request.auth.uid);
    }

    // Food Stall Activity Logs
    match /foodStallActivityLogs/{logId} {
        allow read: if isAuth() && isManagerOrAdmin(request.auth.uid);
        allow create: if isAuth();
        allow update, delete: if false;
    }

  }
}
